#+PROPERTY: header-args :mkdirp yes

* Contents
:PROPERTIES:
:HASH:     6a77c534ae022e50f5048a20e4b281ba
:MODIFIED: [2021-07-07 Wed 16:25]
:TOC:      :include all :depth 2
:END:

:CONTENTS:
- [[#contents][Contents]]
- [[#what-is-this][What is this?]]
- [[#scripts][Scripts]]
  - [[#byte-compilation][Byte Compilation]]
  - [[#dependency-installation][Dependency Installation]]
  - [[#emacs-docker-container][Emacs Docker Container]]
- [[#initialization][Initialization]]
  - [[#early-init][Early Init]]
  - [[#init][Init]]
- [[#lib][Lib]]
  - [[#helpers][Helpers]]
  - [[#initialization][Initialization]]
:END:

* Building
:PROPERTIES:
:HASH:     0e3aa8d054c9158f87ec23518113a340
:MODIFIED: [2021-07-12 Mon 14:04]
:END:

** Dockerfile
:PROPERTIES:
:HASH:     1a6fc187cb0e108d78f53c8e2499f67f
:MODIFIED: [2021-07-12 Mon 14:18]
:header-args+: :tangle .emacs.d/Dockerfile
:END:

#+begin_src dockerfile
  FROM silex/emacs:cask

  WORKDIR /root/.emacs.d

  RUN apt-get update
  RUN apt-get install -y git make bsdmainutils

  CMD bash
#+end_src

** Makefile
:PROPERTIES:
:HASH:     ba9a60f04bbd0fce8cb6aa6749c321a2
:MODIFIED: [2021-07-12 Mon 16:13]
:header-args+: :tangle .emacs.d/Makefile
:END:

#+begin_src makefile
SHELL = /bin/sh

DOCKER = podman
EMACS  = emacs

RUN   = run -it --rm -v "${PWD}/.emacs.d:/root/.emacs.d" tmacs
TEST  = bash -c 'cd tests; cask install; cask exec sh -c "buttercup -L ../tests"'

COMPILED_LIBS = $(patsubst %,%c,$(shell find components/ -name '*.el' -print))

.SUFFIXES:
.SUFFIXES: .el .elc

.el.elc:
	$(EMACS) -Q -batch -f batch-byte-compile $<

.PHONY: help
help: ## Display this message
	@echo "usage:" >&2
	@grep -h "[#]# " $(MAKEFILE_LIST)		| \
		sed 's/^/  make /'			| \
		sed 's/:[^#]*[#]# /|/'			| \
		sed 's/%/LANG/'				| \
		column -t -s'|' >&2

.PHONY: docker
docker: compile ## Build a Docker image for Emacs
	@$(DOCKER) build . -t tmacs

.PHONY: compile
compile: $(COMPILED_LIBS) ## Byte compile library files
	@echo $(COMPILED_LIBS)

.PHONY: clean
clean: ## Remove byte compiled files and Docker images
	@rm $(COMPILED_LIBS)
	@$(DOCKER) image rm --filter reference=tmacs

.PHONY: check
check:
	@$(DOCKER) $(RUN) $(TEST)

.PHONY: run
run: check
	@$(DOCKER) $(RUN)
#+end_src

** Cask File
:PROPERTIES:
:HASH:     52a5f3f438a4d7fdb5274ab8c97c28bd
:MODIFIED: [2021-07-12 Mon 15:57]
:header-args+: :tangle .emacs.d/tests/Cask
:END:

#+begin_src cask
  (source gnu)
  (source melpa)

  (development
   (depends-on "buttercup")
   (depends-on "el-get"))
#+end_src

* Initialization
:PROPERTIES:
:HASH:     b5eab1757b81c89df8a3f1756fcaab20
:MODIFIED: [2021-07-07 Wed 10:34]
:END:

** Early Init
:PROPERTIES:
:HASH:     cfda0c14c58e085c7925c099e9e66de4
:MODIFIED: [2021-07-12 Mon 16:43]
:header-args+:   :tangle .emacs.d/early-init.el
:END:

#+begin_src emacs-lisp
  ;;; early-init.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp
  (setq debug-init (getenv "DEBUG_EMACS")
        debug-on-error debug-init)
#+end_src

Garbage collection significantly affects start up time; by setting
=gc-cons-threshold= to a high number, we prevent it from running during
start up.

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

If we're running an Emacs version that supports native compilation, we
should avoid compiling anything during start up.

#+begin_src emacs-lisp
  (if (boundp 'comp-deferred-compilation)
      (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))
#+end_src

Emacs 27 added support for a file loaded before =user-init-file=, so we
can use this to our advantage and disable package initialization
early.

#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
  (fset #'package--ensure-init-file #'ignore)
#+end_src

Doom Emacs sets =file-name-handler-alist= to =nil= during start
up. =file-name-handler-alist= is a variable used to specify special
handlers for any file name matching a given regular expression; calls
to =require= and =load= consult this variable, but we can apparently save
a marginal amount of time by unsetting it.

#+begin_src emacs-lisp
  (unless (or (daemonp) noninteractive)
    (let ((old-file-name-handler-alist file-name-handler-alist))
      (setq-default file-name-handler-alist nil)
      (eval
       `(defun tmacs-reset-file-handler-alist ()
          "This function is used in `emacs-startup-hook' to reset `file-name-handler-alist' to its default value."
          (setq file-name-handler-alist
                (delete-dups (append file-name-handler-alist
                                     ',old-file-name-handler-alist)))))
      (add-hook 'emacs-startup-hook #'tmacs-reset-file-handler-alist 101)))
#+end_src

And now we'll load our init library, which we define [[id:0b1a1e03-01cb-43fb-8359-25c465a7ad3f][below]].

#+begin_src emacs-lisp
  (load (concat user-emacs-directory "components/initialization.el") nil 'nomessage)
#+end_src

** Init
:PROPERTIES:
:HASH:     49c277e947e2c767ddf44b8c87b90312
:MODIFIED: [2021-07-12 Mon 17:32]
:header-args+:   :tangle .emacs.d/init.el
:END:

#+begin_src emacs-lisp
  (mapc (apply-partially #'add-to-list 'load-path)
        (seq-filter #'file-directory-p
                    (directory-files-recursively
                     (concat (file-name-directory load-file-name) "components") ".*" t)))
#+end_src

After initialization, set =tmacs-initialized-p= to indicate that we
didn't encounter any problems.

#+begin_src emacs-lisp
  (setq tmacs-initialized-p t)
#+end_src

* Components
:PROPERTIES:
:HASH:     cc0ba3414169702cd68003982dd7e375
:MODIFIED: [2021-07-08 Thu 14:08]
:END:

Different aspects and features of Emacs are customized as
"components," which essentially means that I've attempted to
group/load similar things together as much as possible.

** Initialization
:PROPERTIES:
:HASH:     29f62acb1242e578bd99f29d67c5863c
:MODIFIED: [2021-07-09 Fri 15:57]
:header-args+:  :mkdirp yes :tangle .emacs.d/components/initialization.el
:ID:       0b1a1e03-01cb-43fb-8359-25c465a7ad3f
:END:

This library contains initialization code that gets loaded *before*
=init.el= .

#+begin_src emacs-lisp
  ;;; initialization.el -*- lexical-binding: t; -*-
#+end_src

Doom uses the following constants to vary behavior depending on
Emacs's version and the running operating system. I don't use Windows,
macOS, or any BSDs often (if ever), but these may come in handy.

#+begin_src emacs-lisp
  (defconst EMACS27+    (> emacs-major-version 26))
  (defconst EMACS28+    (> emacs-major-version 27))
  (defconst IS-MAC      (eq system-type 'darwin))
  (defconst IS-LINUX    (eq system-type 'gnu/linux))
  (defconst IS-WINDOWS  (memq system-type '(cygwin windows-nt ms-dos)))
  (defconst IS-BSD      (or IS-MAC (eq system-type 'berkeley-unix)))
#+end_src

We should ensure that our libraries are part of the load path and
require dependencies needed during initialization.

#+begin_src emacs-lisp
  (add-to-list 'load-path (file-name-directory load-file-name))

  (require 'subr-x)
  (require 'cl-lib)
#+end_src

*** Package Management
:PROPERTIES:
:HASH:     b34620502e08145e2cc5ed29cdb684b0
:MODIFIED: [2021-07-07 Wed 15:18]
:END:

**** Bootstrapping
:PROPERTIES:
:HASH:     41843f5bcb3fe927b8df945139438edf
:MODIFIED: [2021-07-12 Mon 16:59]
:END:

We use =straight.el= for package management. The following source block
configures some variables that are used for bootstrapping and
separating =straight.el='s build directories based on the version of the
currently running Emacs.

#+begin_src emacs-lisp
  (setq straight-base-dir                "~/.emacs.d/var/straight"
        straight-build-dir               (format "build-%s" emacs-version)
        straight-use-package-by-default  t)

  (when (executable-find "watchexec")
    (setq straight-check-for-modifications '(watch-files find-when-checking)))

  (defvar bootstrap-version nil
    "Variable used by `straight.el' to verify bootstrapping.")

  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

**** Core Packages
:PROPERTIES:
:HASH:     f248e3d4e0241e93e770b4264902b03c
:MODIFIED: [2021-07-08 Thu 16:03]
:END:

[[https://github.com/jwiegley/use-package][use-package]] is indispensable for automatically installing and
configuring packages.

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

[[https://github.com/emacscollective/no-littering][no-littering]] helps keep our =.emacs.d= directory as tidy as possible.

#+begin_src emacs-lisp
  (use-package no-littering
    :demand t)
#+end_src

[[https://github.com/emacsmirror/gcmh][gcmh-mode]] runs garbage collection via idle timer to avoid interfering
with user activity.

#+begin_src emacs-lisp
  (use-package gcmh
    :demand t
    :init
    (setq gcmh-idle-delay           5
          gcmh-high-cons-threshold  (* 16 1024 1024)
          gcmh-verbose              debug-init))
#+end_src

[[https://github.com/lastquestion/explain-pause-mode][explain-pause-mode]] summarizes Emacs activity/resource usage in a
=top=-like fashion.

#+begin_src emacs-lisp
  (use-package explain-pause-mode
    :straight
    (:host github
     :repo "lastquestion/explain-pause-mode")
    :demand t)
#+end_src

***** Keybinding
:PROPERTIES:
:HASH:     a8aa47f89edfafde86cabc0185394d0b
:MODIFIED: [2021-07-08 Thu 16:09]
:END:

[[https://github.com/justbur/emacs-which-key][which-key]] provides a helpful interface for discovery of keybindings.

#+begin_src emacs-lisp
  (use-package which-key
    :demand t)
#+end_src

[[https://github.com/noctuid/general.el][general]] assists us with convenient and consistent keybindings.

#+begin_src emacs-lisp
  (use-package general
    :demand t
    :config
    (general-evil-setup t)
    (general-override-mode)
    (general-auto-unbind-keys)
    ;; Define a macro that binds commands to a "leader" key (SPC, in
    ;; this case).
    (general-create-definer tm/leader-def
      :states             '(normal motion visual emacs insert)
      :keymaps            '(local override)
      :prefix             "SPC"
      :non-normal-prefix  "M-SPC"
      :prefix-command     'tm/prefix-command
      :prefix-map         'tm/prefix-map)
    (defmacro tm/create-leader-definer (name infix &optional wrapping)
      "A helper macro for wrapping definers defined via `general-create-definer'.

    NAME is used to generate the definer's wrapper name. INFIX
    determines the key used as a prefix. WRAPPING can be optionally
    specified as in the aforementioned macro."
      (declare (indent defun))
      (let* ((leader-prefix (concat "tm/" name "-leader-"))
             (leader-name (intern (concat leader-prefix "def")))
             (leader-cmd (intern (concat leader-prefix "command")))
             (leader-map (intern (concat leader-prefix "map")))
             (wrapping (or wrapping #'tm/leader-def)))
        `(general-create-definer ,leader-name
           :wrapping ,wrapping
           :infix ,infix
           :prefix-command ',leader-cmd
           :prefix-map ',leader-map)))
    (tm/create-leader-definer "file"   "f")
    (tm/create-leader-definer "help"   "h")
    (tm/create-leader-definer "dir"    "d")
    (tm/create-leader-definer "search" "s")
    (tm/create-leader-definer "toggle" "t")
    (tm/create-leader-definer "buffer" "b"))
#+end_src

[[https://github.com/emacs-evil/evil][evil-mode]] creates Vim-like keybindings and functionality for Emacs.

#+begin_src emacs-lisp
  (use-package evil
    :general
    (:states   '(normal motion)
     :keymaps  '(local override)
     "/"       'swiper)
    :init
    (setq evil-want-keybinding   nil
          evil-want-integration  t
          evil-want-fine-undo    t
          evil-cross-lines       t)
    (evil-mode))
#+end_src

*** Native Compilation
:PROPERTIES:
:HASH:     0ccb3deb9626943d9df3222129b83503
:MODIFIED: [2021-07-08 Thu 14:43]
:END:

Doom configures a variety of settings if native compilation is
supported. I haven't really looked into any of it, but I assume the
point is to avoid unpredictable behavior and to optimize start up
time.

#+begin_src emacs-lisp
  (when EMACS28+
    (mapc (lambda (varset)
            (unless (boundp (car varset))
              (defvaralias (car varset) (cdr varset))))
          '((native-comp-deferred-compilation           . comp-deferred-compilation)
            (native-comp-deferred-compilation-deny-list . comp-deferred-compilation-deny-list)
            (native-comp-eln-load-path                  . comp-eln-load-path)
            (native-comp-warning-on-missing-source      . comp-warning-on-missing-source)
            (native-comp-driver-options                 . comp-native-driver-options)
            (native-comp-async-query-on-exit            . comp-async-query-on-exit)
            (native-comp-async-report-warnings-errors   . comp-async-report-warnings-errors)
            (native-comp-async-env-modifier-form        . comp-async-env-modifier-form)
            (native-comp-async-all-done-hook            . comp-async-all-done-hook)
            (native-comp-async-cu-done-functions        . comp-async-cu-done-functions)
            (native-comp-async-jobs-number              . comp-async-jobs-number)
            (native-comp-never-optimize-functions       . comp-never-optimize-functions)
            (native-comp-bootstrap-deny-list            . comp-bootstrap-deny-list)
            (native-comp-always-compile                 . comp-always-compile)
            (native-comp-verbose                        . comp-verbose)
            (native-comp-debug                          . comp-debug)
            (native-comp-speed                          . comp-speed))))

  (when (boundp 'native-comp-eln-load-path)
    (add-to-list 'native-comp-eln-load-path (no-littering-expand-var-file-name "eln/")))

  (with-eval-after-load 'comp
    ;; TODO: Add modes to `native-comp-deferred-compilation-deny-list'.
    )
#+end_src

*** Quieter Start Up
:PROPERTIES:
:HASH:     69ee03a656076b676d358c5049092272
:MODIFIED: [2021-07-08 Thu 14:44]
:END:

Doom uses the following configuration changes to decrease the amount
of noise during start up.

#+begin_src emacs-lisp
  (setq ad-redefinition-action 'accept)

  ;; Get rid of "For information about GNU Emacs..." message at startup, unless
  ;; we're in a daemon session where it'll say "Starting Emacs daemon." instead,
  ;; which isn't so bad.
  (unless (daemonp)
    (advice-add #'display-startup-echo-area-message :override #'ignore))

  ;; Reduce *Messages* noise at startup. An empty scratch buffer (or the dashboard)
  ;; is more than enough.
  (setq inhibit-startup-message            t
        inhibit-startup-echo-area-message  user-login-name
        inhibit-default-init               t
        initial-major-mode                 'fundamental-mode
        initial-scratch-message            nil)
#+end_src

*** Less Littering
:PROPERTIES:
:HASH:     43ede217e6912779e5e51ceb7d2d9693
:MODIFIED: [2021-07-08 Thu 13:44]
:END:

#+begin_src emacs-lisp
  (setq async-byte-compile-log-file  (no-littering-expand-var-file-name "async-bytecomp.log")
        custom-file                  (no-littering-expand-var-file-name "custom.el")
        desktop-dirname              (no-littering-expand-var-file-name "desktop")
        desktop-base-file-name       (no-littering-expand-var-file-name "autosave")
        desktop-base-lock-name       (no-littering-expand-var-file-name "autosave-lock")
        pcache-directory             (no-littering-expand-var-file-name "pcache/")
        request-storage-directory    (no-littering-expand-var-file-name "request"))
#+end_src

*** Optimizations
:PROPERTIES:
:HASH:     5eb88e3d2d4202ef8347c6b9f9568cdd
:MODIFIED: [2021-07-08 Thu 14:46]
:END:

Doom uses the following (extensive) configuration to optimize Emacs
start up.

#+begin_src emacs-lisp
  ;; A second, case-insensitive pass over `auto-mode-alist' is time wasted, and
  ;; indicates misconfiguration (don't rely on case insensitivity for file names).
  (setq auto-mode-case-fold nil)

  ;; Disable bidirectional text rendering for a modest performance boost. I've set
  ;; this to `nil' in the past, but the `bidi-display-reordering's docs say that
  ;; is an undefined state and suggest this to be just as good:
  (setq-default bidi-display-reordering   'left-to-right
                bidi-paragraph-direction  'left-to-right)

  ;; Disabling the BPA makes redisplay faster, but might produce incorrect display
  ;; reordering of bidirectional text with embedded parentheses and other bracket
  ;; characters whose 'paired-bracket' Unicode property is non-nil.
  (setq bidi-inhibit-bpa t)  ; Emacs 27 only

  ;; Reduce rendering/line scan work for Emacs by not rendering cursors or regions
  ;; in non-focused windows.
  (setq-default cursor-in-non-selected-windows  nil)
  (setq highlight-nonselected-windows           nil)

  ;; More performant rapid scrolling over unfontified regions. May cause brief
  ;; spells of inaccurate syntax highlighting right after scrolling, which should
  ;; quickly self-correct.
  (setq fast-but-imprecise-scrolling t)

  ;; Don't ping things that look like domain names.
  (setq ffap-machine-p-known 'reject)

  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we halve startup times, particularly when we use
  ;; fonts that are larger than the system default (which would resize the frame).
  (setq frame-inhibit-implied-resize t)

  ;; Emacs "updates" its ui more often than it needs to, so slow it down slightly
  (setq idle-update-delay 1.0)  ; default is 0.5

  ;; Font compacting can be terribly expensive, especially for rendering icon
  ;; fonts on Windows. Whether disabling it has a notable affect on Linux and Mac
  ;; hasn't been determined, but do it there anyway, just in case. This increases
  ;; memory usage, however!
  (setq inhibit-compacting-font-caches t)

  ;; Increase how much is read from processes in a single chunk (default is 4kb).
  ;; This is further increased elsewhere, where needed (like our LSP module).
  (setq read-process-output-max (* 64 1024))  ; 64kb

  ;; Introduced in Emacs HEAD (b2f8c9f), this inhibits fontification while
  ;; receiving input, which should help a little with scrolling performance.
  (setq redisplay-skip-fontification-on-input t)

  ;; Performance on Windows is considerably worse than elsewhere. We'll need
  ;; everything we can get.
  (when IS-WINDOWS
    (setq w32-get-true-file-attributes  nil           ; decrease file IO workload
          w32-pipe-read-delay           0             ; faster IPC
          w32-pipe-buffer-size          (* 64 1024))) ; read more at a time (was 4K)

  ;; Remove command line options that aren't relevant to our current OS; means
  ;; slightly less to process at startup.
  (unless IS-MAC   (setq command-line-ns-option-alist nil))
  (unless IS-LINUX (setq command-line-x-option-alist nil))

  ;; HACK `tty-run-terminal-initialization' is *tremendously* slow for some
  ;;      reason; inexplicably doubling startup time for terminal Emacs. Keeping
  ;;      it disabled will have nasty side-effects, so we simply delay it instead,
  ;;      and invoke it later, at which point it runs quickly; how mysterious!
  (unless (daemonp)
    (defun tmacs-init-tty ()
      (advice-remove #'tty-run-terminal-initialization #'ignore)
      (tty-run-terminal-initialization (selected-frame) nil t))
    (advice-add #'tty-run-terminal-initialization :override #'ignore)
    (add-hook 'window-setup-hook
              #'tmacs-init-tty))
#+end_src

*** Security
:PROPERTIES:
:HASH:     d5bb0bf7145cfbf09ef62654f840d2f0
:MODIFIED: [2021-07-07 Wed 14:45]
:END:

Doom uses the following configuration to improve security.

#+begin_src emacs-lisp
  ;; Emacs is essentially one huge security vulnerability, what with all the
  ;; dependencies it pulls in from all corners of the globe. Let's try to be at
  ;; least a little more discerning.
  (setq gnutls-verify-error (not (getenv-internal "INSECURE"))
        gnutls-algorithm-priority
        (when (boundp 'libgnutls-version)
          (concat "SECURE128:+SECURE192:-VERS-ALL"
                  (if (and (not IS-WINDOWS)
                           (>= libgnutls-version 30605))
                      ":+VERS-TLS1.3")
                  ":+VERS-TLS1.2"))
        ;; `gnutls-min-prime-bits' is set based on recommendations from
        ;; https://www.keylength.com/en/4/
        gnutls-min-prime-bits 3072
        tls-checktrust gnutls-verify-error
        ;; Emacs is built with `gnutls' by default, so `tls-program' would not be
        ;; used in that case. Otherwise, people have reasons to not go with
        ;; `gnutls', we use `openssl' instead. For more details, see
        ;; https://redd.it/8sykl1
        tls-program '("openssl s_client -connect %h:%p -CAfile %t -nbio -no_ssl3 -no_tls1 -no_tls1_1 -ign_eof"
                      "gnutls-cli -p %p --dh-bits=3072 --ocsp --x509cafile=%t \
  --strict-tofu --priority='SECURE192:+SECURE128:-VERS-ALL:+VERS-TLS1.2:+VERS-TLS1.3' %h"
                      ;; compatibility fallbacks
                      "gnutls-cli -p %p %h"))

  ;; Emacs stores `authinfo' in $HOME and in plain-text. Let's not do that, mkay?
  ;; This file stores usernames, passwords, and other such treasures for the
  ;; aspiring malicious third party.
  (setq auth-sources (list (no-littering-expand-etc-file-name "authinfo.gpg")
                           "~/.authinfo.gpg"))
#+end_src

*** Footer
:PROPERTIES:
:HASH:     4df8f8284cf1357678fe7c31655ac1b5
:MODIFIED: [2021-07-12 Mon 16:59]
:END:

#+begin_src emacs-lisp
  (provide 'initialization)
  ;;; inialization.el ends here
#+end_src

** Search
:PROPERTIES:
:HASH:     c759a4e23695bcfa950d851d2d761971
:MODIFIED: [2021-07-08 Thu 14:23]
:END:

*** Modern
:PROPERTIES:
:HASH:     2c8800d683e892a3244bfc6644ad8d4d
:MODIFIED: [2021-07-12 Mon 17:01]
:header-args+: :tangle .emacs.d/components/search/modern.el
:END:

#+begin_src emacs-lisp
  ;;; modern-search.el -*- lexical-binding: t; -*-
#+end_src

Completion and search in Emacs is not great by default. Many great
packages exist to provide a better experience for =completing-read= and
buffer searching (and searching anywhere else), but the most popular
have warts. I've used [[https://github.com/abo-abo/swiper][Ivy]] for as long as I've used Emacs and it works
well but it's exceedingly complex. Newer packages exist that aim to
provide simpler APIs and better performance, so we'll give them a try.

[[https://github.com/raxod502/selectrum#swiper][selectrum]] provides a "better incremental narrowing solution." The
author has (rightfully) criticized the absurd complexity of Ivy and
aimed to prevent a similar problem with this package.

#+begin_src emacs-lisp
  (use-package selectrum
    :defer t
    :init
    (selectrum-mode))
#+end_src

To improve selection, we can also use [[https://github.com/raxod502/prescient.el][prescient]] to sort results by
"frecency."

#+begin_src emacs-lisp
  (use-package prescient
    :config
    (prescient-persist-mode))
#+end_src

I'm not sure, but I think the order here (which I stole from Radian)
has some significance... in any case, I assume this loads =selectrum=
and =prescient= correctly.

#+begin_src emacs-lisp
  (use-package selectrum-prescient
    :straight (:host github :repo "raxod502/prescient.el"
               :files ("selectrum-prescient.el"))
    :demand t
    :after selectrum
    :config
    (selectrum-prescient-mode))
#+end_src

=selectrum= focuses on being a generic completion framework that
conforms to the standard Emacs completion API. The author recommends
[[https://github.com/minad/consult][consult]] as an alternative/replacement for [[https://github.com/abo-abo/swiper][swiper/counsel]].

#+begin_src emacs-lisp
  (use-package consult)
#+end_src

#+begin_src emacs-lisp
  (provide 'modern-search)
  ;;; modern-search.el ends here
#+end_src

* Tests
:PROPERTIES:
:HASH:     3cf21022d1607894282d8b788e07957e
:MODIFIED: [2021-07-12 Mon 13:19]
:END:

I've declared Emacs bankruptcy a few times for a variety of
reasons. Each time, the difficulty of troubleshooting unexpected
errors has been one of those reasons. After taking over maintenance of
=jsonnet-mode= I implemented automated tests via [[https://github.com/jorgenschaefer/emacs-buttercup][buttercup]] which has
generally made maintenance a lot easier. Hopefully it will have the
same effect for my configuration.

** Initialization
:PROPERTIES:
:HASH:     8c88e2fc42e7139bcad033ab2e4eff51
:MODIFIED: [2021-07-12 Mon 16:47]
:header-args+: :tangle .emacs.d/tests/test-init.el
:END:

#+begin_src emacs-lisp
  (require 'buttercup)
  (require 'cl-lib)

  (describe "Initialization"
    (before-all
      (setq expected-file-name-handler-alist file-name-handler-alist)
      (cl-letf (((symbol-function 'message) #'ignore))
        (load "../early-init.el")
        (load "../init.el")))

    (it "should succeed"
      (expect tmacs-initialized-p :to-be t))

    (it "should preserve, unset, and reset file-name-handler-alist"
      (expect file-name-handler-alist :to-be expected-file-name-handler-alist)))
#+end_src
