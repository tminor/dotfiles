
* Intro
:PROPERTIES:
:HASH:     04bdac1d31552fe999997dbdc9f1e313
:MODIFIED: 2019-06-27 21:51:00
:END:

Some conventions:
- General is used for consistent key binding
- Some headings have subheadings titled "Elisp"; these sections
  contain Emacs Lisp code written by me or taken from someone on the
  internet
  - All of these /should/ have a =tm/= prefix; this is not an attempt
    at plagiarism (when stolen from the internet); it is, rather, an
    attempt at consistent namespacing for times when I use
    =describe-fuction= and the like to find
    functions/variables/etc. I've added over time

** Links to interesting configs
:PROPERTIES:
:HASH:     a7c158fe4f1a5dafdd51c1a14f4f9a48
:MODIFIED: [2019-07-03 Wed 00:55]
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-27 Thu 21:50]
:END:

This section contains links to Emacs configurations that I find
interesting (and that I've probably borrowed from). I've also cloned
them for fear of them disappearing!

*** [[https://github.com/terlar/emacs.d][terlar/emacs.d]]
:PROPERTIES:
:HASH:     699823767c8fb5636efbbf23be897256
:MODIFIED: [2019-07-01 Mon 10:04]
:END:

*** [[https://github.com/sk8ingdom/.emacs.d][sk8ingdom/.emacs.d]]
:PROPERTIES:
:HASH:     010c7e3c9a227ed644b9dcf863455301
:MODIFIED: [2019-07-01 Mon 10:06]
:END:

*** [[https://github.com/purcell/emacs.d][purcell/emacs.d]]
:PROPERTIES:
:HASH:     2e108c977a3413a8123da5be081ee07d
:MODIFIED: [2019-09-04 Wed 13:06]
:END:

** Table of Contents                                                  :TOC:
:PROPERTIES:
:HASH:     323b719c48e42275bb35a670feb3f3cc
:MODIFIED: [2020-01-07 Tue 16:51]
:END:

- [[#intro][Intro]]
  - [[#links-to-interesting-configs][Links to interesting configs]]
- [[#using-emacs][Using Emacs]]
  - [[#load-path][Load path]]
  - [[#exwm][EXWM]]
  - [[#cleaningtidying][Cleaning/tidying]]
  - [[#key-bindings][Key bindings]]
  - [[#emacs-navigation][Emacs navigation]]
  - [[#fonts][Fonts]]
  - [[#interface-gui][Interface (GUI)]]
  - [[#helpinfo][Help/info]]
  - [[#completion-ivycounselswiper][Completion (Ivy/Counsel/Swiper)]]
  - [[#themes][Themes]]
  - [[#config-management][Config management]]
  - [[#clipboard-management][Clipboard management]]
  - [[#search-modes][Search modes]]
  - [[#emacswiki][EmacsWiki]]
  - [[#ascii-to-unicode][Ascii to Unicode]]
  - [[#expand-region][expand-region]]
  - [[#undo-propose][undo-propose]]
- [[#mail][Mail]]
  - [[#refine-notmuch-alertsinclude-x11-aware-function][Refine notmuch alerts/include X11 aware function]]
  - [[#reminders-for-sent-mail][Reminders for sent mail]]
  - [[#notmuch][Notmuch]]
  - [[#gnus][Gnus]]
- [[#organize][Organize]]
  - [[#org-mode][=org-mode=]]
  - [[#org-agenda][=org-agenda=]]
  - [[#org-capture][=org-capture=]]
  - [[#org-pomodoro][org-pomodoro]]
  - [[#org-variable-pitch][org-variable-pitch]]
  - [[#org-journal][org-journal]]
  - [[#org-notify][org-notify]]
  - [[#pdfs][PDFs]]
  - [[#org-caldav][org-caldav]]
  - [[#blog-publishing][Blog publishing]]
  - [[#finance][Finance]]
- [[#shell-and-term-modes][Shell and Term Modes]]
  - [[#term-mode][Term-mode]]
  - [[#eshell][Eshell]]
  - [[#sshgpg-keys][SSH/GPG keys]]
- [[#prog-mode][=prog-mode=]]
  - [[#language-modes][Language modes]]
  - [[#ide-features][IDE features]]
  - [[#version-control][Version control]]
  - [[#regex][Regex]]
- [[#hydra][Hydra]]
  - [[#hydra-bootstrap][Hydra bootstrap]]
  - [[#straightel][Straight.el]]
- [[#other][Other]]
  - [[#kill-whitespace-when-saving][Kill whitespace when saving]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#spell-check][Spell check]]
  - [[#file-type-modes-not-prog-mode-files][File type modes (not =prog-mode= files)]]

* Using Emacs
:PROPERTIES:
:HASH:     3bff42a9a16af1405c3bc5d6a35dfc8f
:MODIFIED: [2020-01-07 Tue 11:12]
:END:

** Load path
:PROPERTIES:
:HASH:     d8e0bd6c649de49b656336b237438d72
:MODIFIED: 2019-03-08 15:50:42
:END:

*** Add non-package Elisp to =load-path=
:PROPERTIES:
:HASH:     6748e7faf3539873d6e396426d0b1b01
:MODIFIED: [2019-08-25 Sun 09:57]
:END:

Add non-package provided Elisp to Emacs's =load-path=:

#+BEGIN_SRC emacs-lisp
  (let ((default-directory "~/.emacs.d/lisp/"))
    (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

** EXWM
:PROPERTIES:
:HASH:     cb13e0bcb9dda5b2d20d19074b578358
:MODIFIED: [2020-01-08 Wed 13:16]
:END:

#+begin_quote
Emacs X Window Manager
#+end_quote

#+begin_src emacs-lisp
  ;; (use-package exwm)
  ;; (require 'exwm)
  ;; (require 'exwm-config)
  ;; (exwm-config-default)
#+end_src

** Cleaning/tidying
:PROPERTIES:
:HASH:     8ab3300d36591b24686a3e77931385cc
:MODIFIED: 2019-03-08 15:49:53
:END:

*** =midnight-mode=
:PROPERTIES:
:HASH:     74dc5aa718380679538776734096e4a4
:MODIFIED: [2020-01-02 Thu 14:29]
:END:

#+begin_quote
run something every midnight, e.g., kill old buffers
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package midnight
    :config
    (setq clean-buffer-list-delay-general 2
          clean-buffer-list-kill-regexps '("\\`\\*Man "
                                           "\\`\\*helpful "
                                           "\\`\\*notmuch-"
                                           "\\magit"
                                           "\\`\\*CPU-Profiler-"
                                           "\\`\\*deadgrep"
                                           "\\`\\*Calendar"
                                           "\\`\\*Proced"
                                           "\\`\\*WoMan"))
    (midnight-mode))
#+END_SRC

*** [[https://github.com/emacscollective/no-littering][no-littering]]
:PROPERTIES:
:HASH:     97c3a30edb2ce5dac5f7666b45aeee32
:MODIFIED: [2020-01-02 Thu 14:29]
:END:

#+begin_quote
Help keeping ~/.emacs.d clean
#+end_quote

Keeps files we don't manage from accumulating in =~/.emacs.d/=:

#+BEGIN_SRC emacs-lisp
  ;; Surely there's a better way...
  (use-package recentf)

  (use-package no-littering
    :config
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)
    ;; One of the most common types of files that Emacs creates
    ;; automatically is auto-save files. By default, these appear in the
    ;; current directory of a visited file. No-littering does not change
    ;; this, but you can add the following code to your init.el file to
    ;; store these files in the var directory:
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    ;; Tell `custom' to save its state under ~/.emacs.d/etc/
    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
    ;; Put history file in ~/.emacs.d/var/
    (setq savehist-file (no-littering-expand-var-file-name "history")))
#+END_SRC

** Key bindings
:PROPERTIES:
:HASH:     065b29dcb7f339c8b012d7309865c245
:MODIFIED: 2019-03-08 15:49:53
:END:

*** [[https://github.com/noctuid/general.el][general.el]]
:PROPERTIES:
:HASH:     33932e5a6467acfae968a45d432301ab
:MODIFIED: [2020-01-02 Thu 09:27]
:END:

#+begin_quote
More convenient key definitions in emacs
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)
    (general-override-mode)
    (general-auto-unbind-keys)
    (general-create-definer tm/leader-def
      :states '(normal motion visual emacs insert)
      :keymaps '(local override)
      :prefix "SPC"
      :non-normal-prefix "M-SPC"
      :prefix-command 'tm/prefix-command
      :prefix-map 'tm/prefix-map))
#+END_SRC

*** [[https://github.com/emacs-evil/evil][=evil-mode=]]
:PROPERTIES:
:HASH:     5715c5c0dfb517f7534d705506396c97
:MODIFIED: [2020-01-02 Thu 09:27]
:END:

#+begin_quote
The extensible vi layer for Emacs.
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    :general
    (general-define-key :states '(normal motion)
                        :keymaps '(local override)
                        "/" 'swiper)
    :config
    (evil-mode 1))
#+END_SRC

**** [[https://github.com/emacs-evil/evil-collection][=evil-collection=]]
:PROPERTIES:
:HASH:     b38f704d20ae4d127e935453a2d1e3d5
:MODIFIED: [2020-01-02 Thu 14:29]
:END:

#+begin_quote
A set of keybindings for evil-mode
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :custom
    (evil-collection-company-use-tng nil)
    (evil-collection-setup-minibuffer t)
    (evil-collection-term-sync-state-and-mode-p t)
    :init
    (evil-collection-init))
#+END_SRC

*** [[https://github.com/justbur/emacs-which-key][=which-key=]]
:PROPERTIES:
:HASH:     7ef0161967d60b152ad8022f3a56d9e5
:MODIFIED: [2020-01-08 Wed 11:11]
:END:

#+begin_quote
Emacs package that displays available keybindings in popup
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :general
    (tm/leader-def
      :infix "h"
      :prefix-command 'tm/help-prefix-command
      :prefix-map 'tm/help-prefix-map
      "t" 'which-key-show-top-level
      "M" 'which-key-show-major-mode)
    :config
    (which-key-mode 1)
    (dolist (item '((("<\\([[:alnum:]-]+\\)>" . nil) . ("\\1" . nil))
                    (("\\`\\?\\?\\'" . nil) . ("\u03bb" . nil))
                    (("<up>" . nil) . ("\u2191" . nil))
                    (("<right>" . nil) . ("\u2192" . nil))
                    (("<down>" . nil) . ("\u2193" . nil))
                    (("<left>" . nil) . ("\u2190" . nil))
                    (("SPC" . nil) . ("\u2423" . nil))
                    (("TAB" . nil) . ("\u21b9" . nil))
                    (("RET" . nil) . ("\u23ce" . nil))
                    (("DEL" . nil) . ("\u232b" . nil))
                    (("deletechar" . nil) . ("\u2326" . nil))))
      (cl-pushnew item which-key-replacement-alist :test #'equal))

    (which-key-setup-side-window-bottom)

    (which-key-mode 1))
#+END_SRC

** Emacs navigation
:PROPERTIES:
:HASH:     4779231949f3e304a921508cb6807dfa
:MODIFIED: 2019-03-08 15:49:53
:END:

Navigating in Emacs can be challenging. In this section, we'll make
changes that provide more sane methods for dealing with windows,
buffers, etc.

*** Buffer management
:PROPERTIES:
:HASH:     03fdec9f79386f840a45fca23a55cdfc
:MODIFIED: 2019-06-25 09:12:41
:END:

=ibuffer= provides a menu for manipulating buffers.

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :general
    (tm/leader-def
      "B" 'ibuffer)
    :config
    (autoload 'ibuffer "ibuffer" "List buffers." t))
#+END_SRC

*** Lines, cursors, marks, etc.
:PROPERTIES:
:HASH:     0c308dd41f3dd35f05947ea71ca2bee3
:MODIFIED: 2019-03-08 15:50:42
:END:

**** Indentation
:PROPERTIES:
:HASH:     58c513cbe794c4e04ad80490e18da74a
:MODIFIED: [2020-01-02 Thu 09:46]
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-27 Thu 21:53]
:END:

***** [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]]
:PROPERTIES:
:HASH:     d34cb6aefd9c00b113238340409528ba
:MODIFIED: [2020-01-02 Thu 09:46]
:END:

#+begin_quote
Emacs minor mode to highlight indentation
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :hook
    (prog-mode . highlight-indent-guides-mode)
    :init
    (setq highlight-indent-guides-method 'column
          highlight-indent-guides-responsive 'stack))
#+END_SRC

**** [[https://github.com/abo-abo/avy][avy]]
:PROPERTIES:
:HASH:     fc5a071fc2bc08b27cfd34e0e6b29f1d
:MODIFIED: [2020-01-02 Thu 10:01]
:END:

#+begin_quote
Jump to things in Emacs tree-style
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :general
    (:states 'motion
     :keymaps 'override
     "zg" 'avy-goto-char
     "z2" 'avy-goto-char-2
     "z1" 'avy-goto-char-timer))
#+END_SRC

*** Window management
:PROPERTIES:
:HASH:     24ef076bad6be26be2c5115f0cd6099b
:MODIFIED: 2019-03-08 15:50:42
:END:

**** Undo/redo window layout changes
:PROPERTIES:
:HASH:     cc9b91036ddf2eb307c3b760a25e78a0
:MODIFIED: 2019-06-25 09:12:41
:END:

From =winner-mode= docstring:

#+BEGIN_QUOTE
Winner mode is a global minor mode that records the changes in
the window configuration (i.e. how the frames are partitioned
into windows) so that the changes can be "undone" using the
command ‘winner-undo’.  By default this one is bound to the key
sequence ‘C-c <left>’.  If you change your mind (while undoing),
you can press ‘C-c <right>’ (calling ‘winner-redo’).
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package winner
    :general
    (tm/leader-def
      :infix "w"
      :prefix-command 'tm/window-prefix-command
      :prefix-map 'tm/window-prefix-map
      "" '(:which-key "window prefix" :ignore t)
      "u" 'winner-undo
      "C-r" 'winner-redo)
    :config
    (winner-mode 1))
#+END_SRC

**** Workspace management
:PROPERTIES:
:HASH:     93a2acf53bbad8d08c912936c36bb28b
:MODIFIED: [2020-01-02 Thu 10:05]
:END:

***** [[https://github.com/wasamasa/eyebrowse][eyebrowse]]
:PROPERTIES:
:HASH:     5eca46ecc5c0c5773e41eb543a0af211
:MODIFIED: [2020-01-02 Thu 10:06]
:END:

#+begin_quote
A simple-minded way of managing window configs in emacs
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :general
    (tm/leader-def
      :infix "e"
      :prefix-command 'tm/eyebrowse-prefix-command
      "" '(:ignore t :which-key "eyebrowse prefix")
      "s" 'eyebrowse-switch-to-window-config
      "l" 'eyebrowse-next-window-config
      "h" 'eyebrowse-prev-window-config
      "r" 'eyebrowse-rename-window-config
      "c" 'eyebrowse-close-window-config
      "'" 'eyebrowse-last-window-config
      "0" 'eyebrowse-switch-to-window-config-0
      "1" 'eyebrowse-switch-to-window-config-1
      "2" 'eyebrowse-switch-to-window-config-2
      "3" 'eyebrowse-switch-to-window-config-3
      "4" 'eyebrowse-switch-to-window-config-4
      "5" 'eyebrowse-switch-to-window-config-5
      "6" 'eyebrowse-switch-to-window-config-6
      "7" 'eyebrowse-switch-to-window-config-7
      "8" 'eyebrowse-switch-to-window-config-8
      "9" 'eyebrowse-switch-to-window-config-9)
    :init
    (setq eyebrowse-keymap-prefix "")
    (global-unset-key (kbd "C-c C-w"))
    :defer 1
    :config
    (setq eyebrowse-switch-back-and-forth t
          eyebrowse-wrap-around t)
    (eyebrowse-mode))
#+END_SRC

**** Switching/deleting/etc. windows
:PROPERTIES:
:HASH:     38a90c670520d78d0cebd5aac3f9b4da
:MODIFIED: [2020-01-02 Thu 10:06]
:END:

***** [[https://github.com/abo-abo/ace-window][ace-window]]
:PROPERTIES:
:HASH:     0c8283e20ef7e7f7ff56bce9b2c30a57
:MODIFIED: [2020-01-02 Thu 10:09]
:END:

#+begin_quote
Quickly switch windows in Emacs
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :init
    (custom-set-faces '(aw-leading-char-face
                        ((t (:foreground "red" :height 3.0)))))
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    :general
    (tm/leader-def
      :infix "w"
      :prefix-command 'tm/window-prefix-command
      "" '(:which-key "window prefix" :ignore t )
      "m" 'ace-window
      "d" 'ace-delete-window
      "s" 'ace-swap-window))
#+END_SRC

***** =window.el= bindings
:PROPERTIES:
:HASH:     9961bc8c4045eb473fde02db7b19e73e
:MODIFIED: [2020-01-02 Thu 10:09]
:END:

Add normal Emacs window commands to leader key:

#+BEGIN_SRC emacs-lisp
  (tm/leader-def
    "1" 'delete-other-windows
    "2" 'split-window-below
    "3" 'split-window-right
    "0" 'delete-window)
#+END_SRC

**** [[https://emacs.stackexchange.com/a/32671][=display-buffer= customization]]
:PROPERTIES:
:HASH:     affda59628884bf3c11c80b49153f6f6
:MODIFIED: [2019-08-24 Sat 20:32]
:END:

Quoting a comment on the original question (linked above):

#+begin_quote
Most people aren't interested in opening up the source code -- e.g.,
the cider-stuff -- to customize it to suit their needs. Instead, they
look for simple fixes like customizing the
=display-buffer-alist=. Others just programmatically fix it after the
fact -- e.g., =delete-window= and =switch-to-buffer=,
split-vertically/horizontally, and so forth. And, there are some
additional libraries to help manage the windows and/or revert back to
the prior layout. I prefer the first option -- i.e., modify the source
and make it absolutely perfect, but I am in the rare minority of
people.
#+end_quote

#+begin_src emacs-lisp
  (progn
    ;; Some modes seem to ignore `display-buffer-alist'; this stack
    ;; exchange answer provides a method for working around this problem:
    ;; https://stackoverflow.com/a/21764397
    (defun tm/mark-this-window-as-satellite ()
      "Mark the current window as the satellite window."
      (interactive)
      (mapc (lambda (win) (set-window-parameter win 'satellite nil))
            (window-list))
      (set-window-parameter nil 'satellite t)
      (message "Window: %s is now the satellite window."
               (selected-window)))
    (defun tm/get-satellite-window ()
      "Find and return the satellite window or nil if non exists."
      (find-if (lambda (win)
                 (window-parameter win 'satellite))
               (window-list)))

    (defun tm/display-buffer-in-satellite (buffer ignore)
      "Display the buffer in the satellite window, or the first window \
      it finds if there is no satellite."
      (let ((satellite-window (or (get-satellite-window)
                                  (first (window-list)))))
        (select-window satellite-window)
        (display-buffer-same-window buffer nil)
        (display-buffer-record-window 'reuse satellite-window buffer)
        satellite-window))
    (setq display-buffer-alist
          ;; Help and stuff at the right
          `((,(rx string-start (or "*Apropos"
                                   "*Backtrace"
                                   "*Compile-Log*"
                                   "*Man"
                                   "*Process List*"
                                   "*Python"
                                   "*Warnings*"
                                   "*WoMan"
                                   "*compilation"
                                   "*helpful"
                                   "*Org Agenda*"
                                   (and (0+ anything) ".pdf")
                                   (and (1+ not-newline) " output*"))) ; AUCTeX
             (display-buffer-reuse-window display-buffer-in-side-window)
             (direction . rightmost)
             (side . right)
             (window-width . 80)
             (window-height . 0.45))
            ;; Side window on bottom:
            (,(rx string-start (or "*Calendar"
                                   "*Reconcile"))
             (display-buffer-reuse-window display-buffer-in-side-window)
             (side . bottom)
             (direction . bottom))
            ;; Right side, below the inferior buffer
            ;; (,(rx string-start (or "*help"
            ;;                        "R_x11"))
            ;;  (display-buffer-reuse-window my/display-window-at-right)
            ;;  (window-width . 80))
            ;; Full frame
            ;; (,(rx string-start "magit: ")
            ;;  (display-buffer-reuse-window my/display-buffer-fullframe))
            ;; Right side, above the inferior buffer
            ;; (,(rx string-start "*R dired")
            ;;  (display-buffer-reuse-window display-buffer-in-direction)
            ;;  (direction . rightmost)
            ;;  (side . right)
            ;;  (slot . -1)
            ;;  (window-height . 10))
            ;; Use same window
            (,(rx string-start (or "*Annotate "
                                   "*edit-indirect"
                                   "magit-log: "
                                   "magit-refs: "
                                   "*Org Src"))
             (display-buffer-reuse-window display-buffer-same-window)))))
#+end_src

**** [[https://github.com/cyrus-and/zoom][=zoom=]]
:PROPERTIES:
:HASH:     eb19bbddbf6feb42eca571bec04af8c1
:MODIFIED: [2019-10-12 Sat 11:50]
:END:

#+begin_quote
Fixed and automatic balanced window layout for Emacs
#+end_quote

#+begin_src emacs-lisp
  (use-package zoom
    :straight
    (:host github :repo "cyrus-and/zoom")
    :general
    (tm/leader-def
      :infix "t"
      :prefix-command 'tm/toggle-prefix-command
      :prefix-map 'tm/toggle-prefix-map
      "" '(:which-key "toggle prefix" :ignore t)
      "z" 'zoom-mode)
    :config
    (setq zoom-size '(0.618 . 0.618)))
#+end_src

*** File and project browsing
:PROPERTIES:
:HASH:     4bdf49d60fde8362d7a733aabd6edf7f
:MODIFIED: 2019-03-08 15:50:42
:END:

**** [[https://github.com/bbatsov/projectile][projectile]]
:PROPERTIES:
:HASH:     8df7db50eb33fb8784fcc5cf0fbe8992
:MODIFIED: [2020-01-02 Thu 10:14]
:END:

#+begin_quote
Project Interaction Library for Emacs
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (use-package ripgrep)
    (use-package projectile-ripgrep)
    :config
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy)
    ;; https://github.com/bbatsov/projectile/issues/1323
    (setq projectile-git-submodule-command nil)
    :general
    (tm/leader-def
      "p" '(:keymap projectile-command-map
            :package projectile
            :which-key "projectile prefix")))
#+END_SRC

*** Scratch buffers
:PROPERTIES:
:HASH:     c70cffbc9bb291cace90e6fb232f30af
:MODIFIED: [2019-10-11 Fri 10:39]
:END:

#+BEGIN_SRC emacs-lisp
  (defun tm/new-empty-text-buffer ()
    "Create a new empty text buffer.

  URL `http://ergoemacs.org/emacs/emacs_new_empty_buffer.html'"
    (interactive)
    (let ((buf (generate-new-buffer "*scratch/text*")))
      (switch-to-buffer buf)
      (setq initial-major-mode 'text-mode)
      buf))

  (defun tm/new-empty-lisp-buffer ()
    "Create a new empty lisp buffer.

  URL `http://ergoemacs.org/emacs/emacs_new_empty_buffer.html'"
    (interactive)
    (let ((buf (generate-new-buffer "*scratch/lisp*")))
      (switch-to-buffer buf)
      (setq initial-major-mode 'lisp-mode)
      buf))
#+END_SRC

Bind scratch buffer functions:

#+BEGIN_SRC emacs-lisp
  (tm/leader-def
    :infix "S"
    :prefix-command 'tm/scratch-prefix-command
    :prefix-map 'tm/scratch-prefix-map
    "" '(:which-key "scratch prefix" :ignore t)
    "t" 'tm/new-empty-text-buffer
    "l" 'tm/new-empty-lisp-buffer)
#+END_SRC

** Fonts
:PROPERTIES:
:HASH:     a052aef3a34e673e985d82db6c851369
:MODIFIED: [2020-01-02 Thu 10:24]
:END:

*** Global font
:PROPERTIES:
:HASH:     550230663c6107f1b690b4dd2f874e11
:MODIFIED: [2020-01-02 Thu 10:25]
:END:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono 13"))
  (set-face-attribute 'default t :font "DejaVu Sans")
#+END_SRC

*** [[https://github.com/domtronn/all-the-icons.el][all-the-icons]]
:PROPERTIES:
:HASH:     0b038decc16ace58139c84d5504a62ee
:MODIFIED: [2020-01-07 Tue 17:02]
:END:

#+begin_quote
A utility package to collect various Icon Fonts and propertize them
within Emacs.
#+end_quote

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

*** =prettify-symbols=
:PROPERTIES:
:HASH:     e522e46e3e1e87018c946aea4a1f3825
:MODIFIED: [2020-01-08 Wed 13:13]
:END:

#+begin_src emacs-lisp
  (use-package prog-mode
    :straight nil
    :config
    (setq prettify-symbols-unprettify-at-point t)
    (dolist (symbol '((">="  . (?\s (Br . Bl) ?\s (Bc . Bc) ?≥))
                      ("<="  . (?\s (Br . Bl) ?\s (Bc . Bc) ?≤))
                      ("lambda" . ?λ)))
      (cl-pushnew symbol prettify-symbols-alist :test #'equal)))
  (global-prettify-symbols-mode 1)
#+end_src

** Interface (GUI)
:PROPERTIES:
:HASH:     6b801f9de511e52c14b77dca14401ea7
:MODIFIED: 2019-03-08 15:49:53
:END:

*** GUI elements (scrollbar, menu bars)
:PROPERTIES:
:HASH:     ec2c1286cc1164090a10a99fe10e1e2f
:MODIFIED: 2019-03-08 15:50:42
:END:

Disable the scroll bar by default:

#+BEGIN_SRC emacs-lisp
  (toggle-scroll-bar -1)
#+END_SRC

=toggle-scroll-bar= doesn't seem to work with new frames. Try this
instead:

#+BEGIN_SRC emacs-lisp
  (defun tm/disable-scroll-bars (frame)
    "Toggle scrollbar in FRAME."
    (modify-frame-parameters frame
                             '((vertical-scroll-bars . nil)
                               (horizontal-scroll-bars . nil))))

  (add-hook 'after-make-frame-functions 'tm/disable-scroll-bars)
#+END_SRC

When using macOS, I preferred Emacs to be maximized. I'm not sure what
effect this has elsewhere, but at least while using i3 it doesn't do
anything noticeable. From [[https://emacs.stackexchange.com/questions/2999/how-to-maximize-my-emacs-frame-on-start-up][here]]:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

Hide tool bar and menu bar:

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

*** Startup
:PROPERTIES:
:HASH:     ff5dbf21a884a11c06cc48508e2ad7e9
:MODIFIED: [2020-01-02 Thu 10:22]
:END:

Don't show the startup message:

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

*** Mode-line
:PROPERTIES:
:HASH:     b5f48b8c58f30510d8cc88e9a129442f
:MODIFIED: [2020-01-02 Thu 10:22]
:END:

**** [[https://github.com/seagle0128/doom-modeline][doom-modeline]]
:PROPERTIES:
:HASH:     c544e3df5d521188793af494d5fd720a
:MODIFIED: [2020-01-02 Thu 10:49]
:END:

#+begin_quote
A fancy and fast mode-line inspired by minimalism design.
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :init
    (require 'all-the-icons)
    :config
    (setq doom-modeline-buffer-file-name-style 'truncate-all)
    (setq doom-modeline-enable-word-count t)
    (setq doom-modeline-icon t)
    (setq doom-modeline-height 45)
    :defer t
    :hook (after-init . doom-modeline-init))
#+END_SRC

*** [[https://github.com/gonewest818/dimmer.el][dimmer.el]]
:PROPERTIES:
:HASH:     8d904da25ccdde6bf9d658b7c4d2c0db
:MODIFIED: [2020-01-08 Wed 11:13]
:END:

#+begin_quote
Interactively highlight which buffer is active by dimming the others.
#+end_quote

#+begin_src emacs-lisp
  (use-package dimmer
    :commands (dimmer-configure-which-key)
    :init
    (dimmer-configure-which-key)
    (dimmer-configure-which-key))
#+end_src

** Help/info
:PROPERTIES:
:HASH:     2fa62ef0c3a4c4512b5f5ec92e2d1def
:MODIFIED: [2020-01-07 Tue 13:58]
:END:

*** [[https://github.com/Wilfred/helpful][helpful]]
:PROPERTIES:
:HASH:     897dae2fb1fa19649451bbd4ec886a28
:MODIFIED: [2020-01-02 Thu 10:20]
:END:

#+begin_quote
A better Emacs *help* buffer
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :general
    (tm/leader-def
      :infix "h"
      :prefix-command 'tm/help-prefix-command
      :prefix-map 'tm/help-prefix-map
      "" '(:which-key "help prefix" :ignore t)
      "s" 'helpful-symbol
      "k" 'helpful-key
      "m" 'man))
#+END_SRC

*** Lossage/keybinding help
:PROPERTIES:
:HASH:     af99bf0d6762682a3d5c6c8ef07d65ae
:MODIFIED: [2020-01-02 Thu 10:53]
:END:

#+begin_src emacs-lisp
  (tm/leader-def
    :infix "h"
    :prefix-command 'tm/help-prefix-command
    :prefix-map 'tm/help-prefix-map
    "l" 'view-lossage
    "g" 'general-describe-keybindings)
#+end_src

** Completion (Ivy/Counsel/Swiper)
:PROPERTIES:
:HASH:     a249a998b4b6a03e3749dd2e5bfd6282
:MODIFIED: [2020-01-02 Thu 10:55]
:END:

*** [[https://github.com/Yevgnen/ivy-rich/blob/master/README.org][=ivy-rich=]]
:PROPERTIES:
:HASH:     a0ddecb0eed169587eb94b28ff8425ca
:MODIFIED: [2020-01-02 Thu 11:09]
:END:

#+begin_quote
More friendly interface for ivy
#+end_quote

#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (defun ivy-rich-switch-buffer-icon (candidate)
      (with-current-buffer
          (get-buffer candidate)
        (let ((icon (all-the-icons-icon-for-mode major-mode)))
          (if (symbolp icon)
              (all-the-icons-icon-for-mode 'fundamental-mode)
            icon))))
    :config
    (setcdr (assq t ivy-format-functions-alist)
            #'ivy-format-function-line)
    (setq ivy-rich-display-transformers-list
          '(ivy-switch-buffer
            (:columns
             ((ivy-rich-switch-buffer-icon :width 2)
              (ivy-rich-switch-buffer-path
               (:width 20 :face font-lock-keyword-face))
              (ivy-rich-candidate
               (:width 30))
              (ivy-rich-switch-buffer-indicators
               (:width 4 :face font-lock-function-name-face :align right))
              (ivy-rich-switch-buffer-major-mode
               (:width 12 :face font-lock-string-face))
              (ivy-rich-switch-buffer-project
               (:width 15 :face font-lock-variable-name-face)))
             :predicate
             (lambda (cand) (get-buffer cand)))))
    :hook
    (after-init . ivy-rich-mode))
#+end_src

*** Ivy
:PROPERTIES:
:HASH:     eccfc9f1d103a701371138d7109c2d3e
:MODIFIED: [2019-09-08 Sun 10:04]
:END:

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (require 'ivy-rich)
    (ivy-mode 1)
    (ivy-rich-mode 1)
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d ")
    :general
    (ivy-minibuffer-map
     "M-j" 'ivy-next-line
     "M-k" 'ivy-previous-line)
    (tm/leader-def
      "b" 'ivy-switch-buffer))
#+END_SRC

*** Counsel
:PROPERTIES:
:HASH:     4e8afd1ec6a7cf38727056208a3dc7cd
:MODIFIED: [2020-01-02 Thu 11:10]
:END:

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :general
    ("M-x" 'counsel-M-x
     "C-x C-f" 'counsel-find-file)
    (imap minibuffer-local-command
      "C-r" 'counsel-minibuffer-history)
    (tm/leader-def
      "x" 'counsel-M-x
      "y" 'counsel-yank-pop)
    (tm/leader-def
      :infix "f"
      :prefix-command 'tm/find-prefix-command
      "" '(:which-key "find prefix" :ignore t)
      "f" 'counsel-find-file
      "F" 'find-file-other-window
      "j" 'counsel-file-jump
      "l" 'counsel-locate)
    (tm/leader-def
      :infix "h"
      :prefix-command 'tm/help-prefix-command
      "" '(:which-key "help prefix" :ignore t)
      "F" 'counsel-describe-face
      "b" 'counsel-descbinds
      "f" 'counsel-describe-function
      "v" 'counsel-describe-variable)
    (tm/leader-def
      :infix "s"
      :prefix-command 'tm/search-prefix-command
      "" '(:which-key "search prefix" :ignore t)
      "d" 'deadgrep)
    :custom
    (counsel-find-file-ignore-regexp "\\`\\.")
    (counsel-yank-pop-preselect-last t)
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :config
    (when (eq system-type 'darwin)
      (setq counsel-locate-cmd 'counsel-locate-cmd-mdfind))

    (setq conusel-org-goto-display-style 'path
          counsel-org-headline-path-separator ": "
          counsel-org-goto-face-style 'org
          counsel-org-headline-display-todo t
          counsel-grep-base-command "rg -Sz -M 120 --no-heading --line-number --color never %s %s"
          counsel-rg-base-command "rg -Sz -M 120 --no-heading --line-number --color never %s ."
          counsel-yank-pop-separator "\n─────────────────────────\n"
          counsel-find-file-ignore-regexp (rx (or (group string-start (char ".#"))
                                                  (group (char "~#") string-end)
                                                  (group ".elc" string-end)
                                                  (group ".pyc" string-end)
                                                  (group ".import.scm" string-end)
                                                  (group ".so" string-end))))
    (counsel-mode 1)
    (defalias 'locate #'counsel-locate))
#+END_SRC

*** Swiper
:PROPERTIES:
:HASH:     70b59d39f8c22636d245b8442324178a
:MODIFIED: 2019-06-28 13:23:54
:END:

#+BEGIN_SRC emacs-lisp
  (use-package swiper)
#+END_SRC

*** All-the-icons for Ivy/Counsel
:PROPERTIES:
:HASH:     1e27c9a4b54f8656da44a9fd710d855e
:MODIFIED: 2019-06-29 12:09:15
:END:

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ivy
    :config
    (all-the-icons-ivy-setup))
#+END_SRC

** Themes
:PROPERTIES:
:HASH:     1876d04a0b3f46350669a15c9f5e1062
:MODIFIED: [2020-01-02 Thu 12:16]
:END:

#+BEGIN_SRC emacs-lisp
  (use-package cherry-blossom-theme)
#+END_SRC

#+begin_src emacs-lisp
  (use-package xresources-theme
    :defer 5)
#+end_src

** Config management
:PROPERTIES:
:HASH:     32b63b2323fd8b58c94b305cbc3a398a
:MODIFIED: 2019-03-08 15:49:53
:END:

*** [[https://github.com/larstvei/Try][Try]]
:PROPERTIES:
:HASH:     f6218756588c17df5a7f41c0069ed0de
:MODIFIED: [2020-01-02 Thu 12:17]
:END:

#+begin_quote
Try out Emacs packages
#+end_quote

#+BEGIN_SRC emacs-lisp
(use-package try)
#+END_SRC

** Clipboard management
:PROPERTIES:
:HASH:     8d2040c3bbf4284bdf8e68e5edb46a11
:MODIFIED: 2019-03-08 15:49:53
:END:

*** Clipboard monitoring
:PROPERTIES:
:HASH:     d7e6c904eb29b03b6e20afd920f91538
:MODIFIED: [2020-01-02 Thu 12:18]
:END:

**** [[https://github.com/bburns/clipmon][clipmon]]
:PROPERTIES:
:HASH:     40c6ef2e2082353bfd70555607bbfb52
:MODIFIED: [2020-01-02 Thu 12:19]
:END:

#+begin_quote
Clipboard monitor for Emacs - monitors clipboard and pastes contents
on change
#+end_quote

#+begin_src emacs-lisp
  (use-package clipmon
    :config
    (add-to-list 'after-init-hook 'clipmon-mode-start)
    (add-to-list 'after-init-hook 'clipmon-persist)
    (setq kill-ring-max 500)
    (setq clipmon-transform-remove
          (with-temp-buffer
            (insert-file-contents "~/.emacs.d/etc/clipmon-ignore")
            (buffer-string))))
#+end_src

Ensure =kill-ring= is saved between sessions:

#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :after 'no-littering
    :config
    (savehist-mode 1)
    (add-to-list 'savehist-additional-variables 'kill-ring))
#+END_SRC

**** TODO Ensure clipmon ignores password                      :moderate:
:PROPERTIES:
:HASH:     017d0f0fef8b8e14d9b5071311cc0d49
:MODIFIED: 2019-06-28 16:43:45
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-28 Fri 16:43]
:END:
** Search modes
:PROPERTIES:
:HASH:     b8a8c9120519a48038c56bd72fbf0ad5
:MODIFIED: 2019-06-22 19:16:04
:END:

*** [[https://github.com/Wilfred/deadgrep][=deadgrep=]]
:PROPERTIES:
:HASH:     94a360fe3db94b7543d386ee1272422e
:MODIFIED: 2019-06-22 19:24:57
:END:

#+begin_quote
Deadgrep is the fast, beautiful text search that your Emacs deserves.
#+end_quote

#+begin_src emacs-lisp
  (use-package deadgrep)
#+end_src

** EmacsWiki
:PROPERTIES:
:HASH:     32214d17fe71e954dbec58bfe061ed4c
:MODIFIED: 2019-06-23 11:23:17
:END:

*** [[https://www.emacswiki.org/emacs/DiredPlus][Dired+]]
:PROPERTIES:
:HASH:     19b664fddb969885a11d884f95a7ccc3
:MODIFIED: [2020-01-02 Thu 14:29]
:END:

#+begin_quote
[Dired+] extends functionalities provided by standard GNU Emacs libraries
dired.el, dired-aux.el, and dired-x.el.-plus
#+end_quote

#+begin_src emacs-lisp
  ;; (use-package dired+
  ;;   ;; https://github.com/syl20bnr/spacemacs/issues/5705
  ;;   :preface
  ;;   (setq dired-omit-files "foo")
  ;;   (use-package dired-x
  ;;     :straight nil
  ;;     :commands (dired-jump
  ;;                dired-jump-other-window
  ;;                dired-omit-mode)))
#+end_src

*** [[https://github.com/emacsmirror/emacswiki.org/blob/master/info%2b.el][Info+]]
:PROPERTIES:
:HASH:     426a4728935c5c666d776172b9451d9f
:MODIFIED: [2019-10-12 Sat 11:50]
:END:

#+begin_quote
Extensions to `info.el'.
#+end_quote

#+begin_src emacs-lisp
  (use-package info+
    :straight
    (:host github :repo "emacsmirror/info-plus")
    :general
    (tm/leader-def
      :infix "h"
      :prefix-command 'tm/help-prefix-command
      :prefix-map 'tm/help-prefix-map
      "" '(:which-key "help prefix" :ignore t)
      "i" 'info)
    :init
    (with-eval-after-load "info" '(require 'info+)))
#+end_src

*** [[https://github.com/emacsmirror/hexrgb/blob/master/hexrgb.el][=hexrgb=]]
:PROPERTIES:
:HASH:     c7240bddaad77700869fca950135b1ee
:MODIFIED: 2019-06-29 12:15:21
:END:

#+begin_quote
Functions to manipulate colors, including RGB hex strings.
#+end_quote

#+begin_src emacs-lisp
  (use-package hexrgb
    :straight (:type git :host github :repo "emacsmirror/hexrgb"))
#+end_src

** Ascii to Unicode
:PROPERTIES:
:HASH:     96f5de701c33f4de3301bf32a6699864
:MODIFIED: [2019-09-09 Mon 16:58]
:END:

** [[https://github.com/magnars/expand-region.el][expand-region]]
:PROPERTIES:
:HASH:     3076acc9a6fa22bd40c8e29b53f70387
:MODIFIED: [2020-01-02 Thu 13:02]
:END:

Required for =go-koans.el=.

#+begin_quote
Emacs extension to increase selected region by semantic units.
#+end_quote

   #+begin_src emacs-lisp
     (use-package expand-region
       :straight
       (:host github :repo "magnars/expand-region.el"))
   #+end_src

** TODO [[https://github.com/jackkamm/undo-propose-el][undo-propose]]                                                 :easy:
:PROPERTIES:
:HASH:     563d5e14e8c63e67d785aa33379811dc
:MODIFIED: 2019-06-29 11:57:58
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-28 Fri 16:08]
:END:

#+begin_quote
=undo-propose.el= is a package for navigating through your undo
history in a temporary buffer.
#+end_quote

* Mail
:PROPERTIES:
:HASH:     77e2ccb28c4429b559d2716250583790
:MODIFIED: 2019-03-08 14:47:24
:END:

** TODO Refine notmuch alerts/include X11 aware function             :hard:
:PROPERTIES:
:HASH:     b980f4d91c4d78d935ee09e08ef08ae3
:MODIFIED: [2019-08-25 Sun 10:44]
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-28 Fri 16:51]
:END:

** TODO Reminders for sent mail
:PROPERTIES:
:HASH:     afb4fe7ed0cd8b4883f7485c0fbd8cac
:MODIFIED: [2019-08-25 Sun 10:44]
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-06 Wed 09:32]
:END:

Reminders a la Gmail about sent mail that hasn't received a response.

** Notmuch
:PROPERTIES:
:HASH:     0b8df170e38710c46c75bcdfcb09b0c2
:MODIFIED: [2019-10-14 Mon 09:20]
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-05 Tue 10:30]
:END:

#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :if (executable-find "notmuch")
    :init
    ;; Org/HTML deps
    (use-package htmlize)
    (use-package org-mime)
    (require 'org-mime)
    (require 'ol-notmuch)
    (use-package w3m
      :if (executable-find "w3m"))
    :general
    (tm/leader-def
      "/" 'notmuch)
    (:keymaps 'notmuch-show-mode-map
     :state '(normal motion)
     "gV" 'notmuch-show-view-raw-message)
    :config
    (require 'tm-mail)
    ;; Help Emacs find notmuch and load it
    (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
    (setq exec-path (append exec-path '("/usr/local/bin")))
    (autoload 'notmuch "notmuch" "notmuch mail" t)

    ;; Tell Emacs how to send mail
    (setq message-send-mail-function 'message-send-mail-with-sendmail
          sendmail-program "/usr/bin/msmtp")

    ;; Configure Fcc
    (setq notmuch-fcc-dirs "work/Sent +sent -new"
          notmuch-maildir-use-notmuch-insert t)

    ;; Other variables
    (setq notmuch-search-oldest-first nil
          message-kill-buffer-on-exit t
          notmuch-show-indent-messages-width 4
          notmuch-multipart/alternative-discouraged '("text/html" "text/plain")
          notmuch-archive-tags '("-inbox" "+archive"))

    ;; Refresh feed buffer at specified intervals if it's open
    (run-with-timer 0 30 'tm/notmuch-refresh-feed-buffer)

    ;; Render HTML with w3m
    (setq mm-text-html-renderer 'w3m)

    ;; Activate line highlighting only for feed buffer
    ;;
    ;; This is very slow, so disabling for now
    ;; (add-hook 'notmuch-search-mode-hook 'tm/set-feed-faces)

    ;; Shows saved searches in `notmuch-hello' even if they're empty.
    (setq notmuch-show-empty-saved-searches t)

    ;; Saved searches for notmuch-hello
    (setq notmuch-saved-searches
          '((:name "inbox"
             :query "tag:inbox"
             :key "i"
             :count-query "tag:inbox and tag:unread")
            (:name "git issues"
             :query "tag:lists/854 and not tag:archive and date:1week..now"
             :count-query "tag:lists/854 and not tag:archive and date:1week..now and tag:unread")
            (:name "feed"
             :query "date:\"1hours..now\"")
            (:name "nagios-gluu"
             :query "subject:\"/idp-demo-prod/\" and tag:nagios-gluu and date:30days..today"
             :count-query "subject:\"/idp-demo-prod/\" and tag:nagios-gluu and date:30days..today and tag:unread")
            (:name "nagios"
             :query "tag:nagios not 'subject:\"/Project: gluu/\"' and date:3days..today"
             :count-query "tag:nagios not 'subject:\"/Project: gluu/\"' and date:3days..today and tag:unread")
            (:name "flappy vs capy"
             :query "subject:\"/gluu/\" and tag:nagios and date:3days..now")
            (:name "git messages"
             :query "tag:git and date:4days..today"
             :count-query "tag:git and date:4days..today and tag:unread")
            (:name "service now"
             :query "tag:servicenow and date:3days..today and not subject:\"/(Resolved|Closed)/\""
             :count-query "tag:servicenow and date:3days..today and not subject:\"/(Resolved|Closed)/\" and tag:unread")
            (:name "ssl"
             :query "tag:ssladmin and date:6days..today"
             :count-query "tag:ssladmin and date:6days..today and tag:unread")
            (:name "cron daemon"
             :query "date:4days..today and from:\"(Cron Daemon)\""
             :count-query "date:4days..today and from:\"(Cron Daemon)\" and tag:unread")
            (:name "tenshi"
             :query "date:2days..today and tag:tenshi-db300 or tag:tenshi-uga"
             :count-query "date:2days..today and tag:tenshi-db300 or tag:tenshi-uga and tag:unread")
            (:name "sent"
             :query "tag:sent"
             :key "t"))))
#+END_SRC

*** TODO Add keybindings for notmuch forward (and others)           :easy:
:PROPERTIES:
:HASH:     bcc46b363caa0c639b0862290130e7be
:MODIFIED: 2019-06-28 16:53:23
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-28 Fri 16:52]
:END:

** Gnus
:PROPERTIES:
:HASH:     3208698b3565e832a0a8eb6f55766786
:MODIFIED: 2019-06-24 10:01:44
:END:

#+begin_src emacs-lisp
  (use-package gnus
    :straight nil
    :demand t
    :general
    (:keymaps 'gnus-group-mode-map
     :states 'normal
     "RET" 'gnus-group-select-group
     "q" 'gnus-group-exit
     "L" 'gnus-group-list-all-groups
     "j" 'gnus-group-next-unread-group
     "J" 'gnus-group-next-group
     "k" 'gnus-group-prev-unread-group
     "K" 'gnus-group-next-group
     "u" 'gnus-group-unsubscribe-current-group
     "gr" 'gnus-group-get-new-news
     "gy" 'hydra-gnus-group/body
     "c" 'gnus-group-catchup-current
     "C" 'gnus-group-catchup-all
     "m" 'gnus-group-mark-group)
    (:keymaps 'gnus-summary-mode-map
     :states 'normal
     "RET" 'gnus-summary-scroll-up
     "C-e" 'gnus-summary-scroll-up
     "C-y" 'gnus-summary-scroll-down
     "C-f" 'gnus-summary-next-page
     "C-b" 'gnus-summary-prev-page
     "G" 'gnus-summary-end-of-article
     "gg" 'gnus-summary-beginning-of-article
     "j" 'gnus-summary-next-unread-article
     "k" 'gnus-summary-prev-unread-article
     "J" 'gnus-summary-next-article
     "K" 'gnus-summary-prev-article
     "c" 'gnus-summary-catchup
     "q" 'gnus-summary-exit
     "t" 'gnus-summary-toggle-header
     "TT" 'gnus-summary-toggle-threads
     "gsd" 'gnus-summary-sort-by-date
     "gsD" 'gnus-summary-sort-by-most-recent-date
     "gss" 'gnus-summary-sort-by-score
     "gsa" 'gnus-summary-sort-by-author
     "gy" 'hydra-gnus-summary/body
     "!" 'gnus-summary-tick-article-forward
     "?" 'gnus-summary-mark-as-dormant
     "MVk" 'gnus-summary-kill-below
     "Mb" 'gnus-summary-set-bookmark
     "MB" 'gnus-summary-remove-bookmark
     "MM" 'gnus-summary-mark-map)
    (:keymaps 'gnus-browse-mode-map)

    :init
    ;; Sets initial `evil-mode' state for Gnus.
    (evil-set-initial-state 'gnus-group-mode 'normal)
    (evil-set-initial-state 'gnus-summary-mode 'normal)
    (evil-set-initial-state 'gnus-browse-mode 'normal)

    (setq gnus-sum-thread-tree-indent "  ")
    (setq gnus-sum-thread-tree-root "")
    (setq gnus-sum-thread-tree-false-root "")
    (setq gnus-sum-thread-tree-single-indent "")
    (setq gnus-sum-thread-tree-vertical "\u2502")
    (setq gnus-sum-thread-tree-leaf-with-other "\u251c\u2500\u25ba ")
    (setq gnus-sum-thread-tree-single-leaf "\u2570\u2500\u25ba ")

    (setq gnus-summary-line-format
          (concat
           "%0{%U%R%z%}"
           "%3{\u2502%}" "%1{%d%}" "%3{\u2502%}" ;; date
           "  "
           "%4{%-20,20f%}" ;; name
           "  "
           "%3{\u2502%}"
           " "
           "%1{%B%}"
           "%s\n"))

    (setq gnus-summary-display-arrow t)
    (setq gnus-use-adaptive-scoring t)

    (setq gnus-default-adaptive-score-alist
          '((gnus-unread-mark)
            (gnus-ticked-mark (from 4))
            (gnus-dormant-mark (from 5))
            (gnus-del-mark (from -4) (subject -1))
            (gnus-read-mark (from 4) (subject 2))
            (gnus-expirable-mark (from -1) (subject -1))
            (gnus-killed-mark (from -1) (subject -3))
            (gnus-kill-file-mark)
            (gnus-ancient-mark)
            (gnus-low-score-mark)
            (gnus-catchup-mark (from -1) (subject -1))))

    (setq gnus-use-cache t)
    (setq gnus-cacheable-groups "^nnnotmuch")
    (setq gnus-cache-directory (concat no-littering-var-directory
                                       "News/cache"))

    :config
    (setq gnus-select-method '(nnnotmuch ""))
    (setq nnnotmuch-groups
          '((""
             ;; InCommon Operators list
             ("nnnotmuch+lists.inc-ops-notifications"
              "tag:lists/inc-ops-notifications")
             ;; Notmuch Commits list
             ("nnnotmuch+lists.notmuch-commits"
              "tag:lists/notmuch-commits")
             ;; All Tenshi messages
             ("nnnotmuch+tenshi" "tag:tenshi-db300 or tag:tenshi-uga")
             ;; Git commits
             ("nnnotmuch+git-commits" "tag:git")
             ;; Git issue messages
             ("nnnotmuch+git-issues" "tag:lists/854")
             ;; Nagios alerts
             ("nnnotmuch+nagios-alerts"
              "tag:nagios and not 'subject:\"/Project: gluu/\"'")
             ;; ServiceNow messages
             ("nnnotmuch+service-now"
              "tag:servicenow and not subject:\"/(Resolved|Closed)/\"")
             ;; SSL messages
             ("nnnotmuch+ssl-admin" "tag:ssladmin")
             ;; Cron daemon output messages
             ("nnnotmuch+cron-daemon" "from:\"(Cron Daemon)\"")))))
#+end_src

*** [[https://github.com/tlikonen/nnnotmuch][=nnnotmuch=]]
:PROPERTIES:
:HASH:     2c3a20426c7bb676ac5045835d641997
:MODIFIED: 2019-06-21 13:56:27
:END:

#+begin_quote
Notmuch search engine back-end for Gnus (Emacs's mail and news client)
#+end_quote

#+begin_src emacs-lisp
  (use-package nnnotmuch
    :straight (nnnotmuch :type git :host github
                         :repo "tlikonen/nnnotmuch"))
#+end_src

* Organize
:PROPERTIES:
:HASH:     c3fc42b6a31bfd97c79bfe477501d7a0
:MODIFIED: [2019-09-14 Sat 13:51]
:END:

** =org-mode=
:PROPERTIES:
:HASH:     954e49775a63443d673af2a166934f2e
:MODIFIED: [2020-01-08 Wed 10:48]
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight org-plus-contrib
    :demand t
    :init
    ;; Load EasyPG Assistant for `org-crypt'.
    (require 'epa-file)
    (setq epa-pinentry-mode 'loopback)
    (epa-file-enable)
    (setq org-crypt-key nil)

    ;; Installs some packages for better PDF viewing.
    (use-package pdf-tools)
    (require 'pdf-tools)
    ;; This package adds functions to use with `org-noter' for easier
    ;; note taking based on PDF contents.
    (use-package org-pdftools
      :straight
      (:host github :repo "fuxialexander/org-pdftools"))
    (use-package org-noter
      :straight
      (:host github :repo "fuxialexander/org-noter"))

    ;; Loads custom org functions.
    (require 'tm-org)
    ;; Evil key bindings in Org mode
    (use-package evil-org
      :straight
      (:type git :host github :repo "Somelauw/evil-org-mode")
      :hook
      (org-mode . evil-org-mode)
      (evil-org-mode . (lambda ()
                         (evil-org-set-key-theme '(textobjects
                                                   insert
                                                   navigation
                                                   additional
                                                   shift
                                                   todo
                                                   heading)))))
    :hook
    (after-init . (lambda ()
                    (if (try-completion "main.org"
                                        (mapcar #'buffer-name
                                                (buffer-list)))
                        (kill-buffer "main.org"))))

    (evil-insert-state-exit . (lambda ()
                                (if (string= major-mode
                                             "org-mode")
                                    (save-buffer))))
    (org-mode . visual-line-mode)
    (org-mode . (lambda () (dolist (symbol '(("#+TITLE:" . ?\u22ee)
                                             ("#+begin_src" . ?\u03bb)
                                             ("#+BEGIN_SRC" . ?\u03bb)
                                             ("#+end_src" . ?\u224b)
                                             ("#+END_SRC" . ?\u224b)
                                             ("#+begin_quote" . ?\u201c)
                                             ("#+BEGIN_QUOTE" . ?\u201c)
                                             ("#+end_quote" . ?\u201d)
                                             ("#+END_QUOTE" . ?\u201d)))
                             (cl-pushnew symbol prettify-symbols-alist
                                         :test #'equal))))
    :general
    (:keymaps 'org-mode-map
     :states '(normal)
     "<S-iso-lefttab>" 'org-global-cycle
     "+" 'org-add-note)

    (tm/leader-def
      :infix "o"
      :prefix-command 'tm/org-prefix-command
      :prefix-map 'tm/org-prefix-map
      "" '(:which-key "org prefix" :ignore t)
      "a" 'org-agenda
      "c" 'org-capture
      "b" 'org-switchb
      "h" 'org-recent-headings-ivy
      "j" 'tm/org-journal-prefix-command
      "l" 'org-store-link
      "L" 'org-insert-link
      "q" 'org-set-tags-command
      "1" 'tm/org-agenda-both-today
      "2" 'tm/org-agenda-work-today
      "3" 'tm/org-agenda-work-week)

    :config
    (require 'org-pdftools)
    (require 'org-noter)
    (add-to-list 'org-file-apps
                 '("\\.pdf\\'" . (lambda (file link)
                                   (org-pdftools-open link))))

    (defun tm/org-agenda-work-week (&optional arg)
      "Opens agenda for this week."
      (interactive)
      (org-agenda arg "ww"))
    (defun tm/org-agenda-work-today (&optional arg)
      "Opens agenda for today."
      (interactive)
      (org-agenda arg "wt"))
    (defun tm/org-agenda-both-today (&optional arg)
      "Opens today's agenda for both home and work."
      (interactive)
      (org-agenda arg "b"))

    (setq org-tags-column -76)

    (require 'org-tempo)
    (require 'org-protocol)

    (tm/org-make-level-faces "16")

    ;; Makes more outline path faces available.
    (setq org-n-level-faces 15)
    ;; (setq org-level-faces
    ;;       '(org-level-1 org-level-2 org-level-3 org-level-4 org-level-5
    ;;                     org-level-6 org-level-7 org-level-8 org-level-9
    ;;                     org-level-10 org-level-11 org-level-12))

    ;; Use UTF8 bullets instead of asterisks for Org headings
    (use-package org-bullets
      :hook
      (org-mode . (lambda () (org-bullets-mode 1)))
      :config
      (setq org-bullets-bullet-list
            '("⑴" "⑵" "⑶" "⑷" "⑸" "⑹" "⑺" "⑻" "⑼" "⑽"
              "⑾" "⑿" "⒀" "⒁" "⒂" "⒃")))

    ;; Add TOC for any heading with :TOC: tag
    ;; https://github.com/snosov1/toc-org
    (use-package toc-org
      :config
      (add-hook 'org-mode-hook 'toc-org-mode))

    ;; Sets org file base directory.
    (setq org-base-directory "~/org/")
    (setq org-work-directory (concat org-base-directory "work/"))
    (setq org-home-directory (concat org-base-directory "home/"))

    ;; Adds indentation based on heading level.
    (setq org-startup-indented t)

    ;; Enables syntax highlighting for code blocks.
    (setq org-src-fontify-natively t)

    ;; (add-hook 'window-configuration-change-hook 'tm/place-org-tags)

    ;; Add modified time property when Org mode files are saved
    (add-hook 'before-save-hook
              (lambda ()
                (when (eq major-mode 'org-mode)
                  (org-map-entries #'tm/update-modification-time ;; FUNC
                                   nil			   ;; MATCH
                                   'file			   ;; SCOPE
                                   #'tm/skip-nonmodified)))) ;; SKIP

    ;; Define TODO/DONE-state keywords
    (setq org-todo-keywords
          '((sequence "TODO(t!)"
                      "WAIT(w@)"
                      "PROJECT(p)"
                      "|"
                      "DONE(d@)"
                      "CANCELLED(c@)"
                      "NOTE(n!)")))

    ;; Enable state change logging in :LOGBOOK: drawer
    (setq org-log-into-drawer t)

    ;; Enable fast todo selection
    (setq org-use-fast-todo-selection t)

    ;; Make headlines look different for TODO/DONE states
    (setq org-fontify-done-headline t)
    (setq org-fontify-quote-and-verse-blocks t)
    (setq org-fontify-whole-heading-line t)

    ;; Org modules notes:
    ;;
    ;; - The values set below were probably copied from elsewhere, so I'm
    ;;   not sure what most of them do.
    ;; - Org Easy templates uses a different system in org 9.2.
    ;;   `org-tempo' provides the old functionality by loading it with
    ;;   `org-modules'.
    ;;
    (setq org-modules
          '(org-bbdb org-bibtex org-docview org-gnus org-habit org-info
                     org-irc org-mhe org-rmail org-w3m org-habit-plus
                     org-id org-drill))

    ;; Faces

    ;; Task state faces
    (setq org-todo-keyword-faces
          '(("TODO" :background "#DD0B53" :foreground "#EAEAEA"
             :weight bold :box (:line-width -1 :style released-button))
            ("DONE" :background "#0F0" :foreground "#000" :weight bold
             :box (:line-width -1 :style released-button))
            ("WAIT" :background "#FEDA98" :foreground "#000" :weight bold
             :box (:line-width -1 :style released-button))
            ("PROJECT" :background "#742FD1" :foreground "#EAEAEA" :weight bold
             :box (:line-width -1 :style released-button))
            ("CANCELLED" :background "#F94FA0" :foreground "#EAEAEA"
             :weight bold :box (:line-width -1 :style released-button))
            ("MEETING" :background "#3EDAD4" :foreground "#000"
             :weight bold :box (:line-width -1 :style released-button))))

    ;; Priority faces
    (setq org-priority-faces '((?A . (:foreground "#DD0B53" :weight bold))
                               (?B . (:foreground "#FEDA98"))
                               (?C . (:foreground "#0F0"))))

    ;;  ;;;;;;;;;;;;;;;;;;;
    ;;
    ;; `org-refile' section
    ;;
    ;;  ;;;;;;;;;;;;;;;;;;;

    ;; `org-refile-targets' controls completion candidates for
    ;; `org-refile'.  The following enables refiling to any file in
    ;; `org-agenda-files' and any heading 10 levels or less therein.
    (setq org-refile-targets
          `((org-agenda-files . (:maxlevel . 10))
            (,(concat user-emacs-directory "main.org") . (:maxlevel . 16))))

    ;; Setting the following to nil enables ivy read completions.
    (setq org-outline-path-complete-in-steps nil)

    ;; Includes file names in refile targets.
    (setq org-refile-use-outline-path 'file)

    ;; Beautifying org-mode in Emacs:
    ;; https://zzamboni.org/post/beautifying-org-mode-in-emacs/
    (setq org-hide-emphasis-markers t)
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 ()
                                    (compose-region (match-beginning 1)
                                                    (match-end 1) "\u2022")))))))
#+END_SRC

** =org-agenda=
:PROPERTIES:
:HASH:     a1cebacd53f40540303ef572038bd403
:MODIFIED: [2020-01-07 Tue 13:50]
:END:

*** Config
:PROPERTIES:
:HASH:     b49a89210bc98fb2204b580f46333b43
:MODIFIED: [2020-01-07 Tue 13:48]
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :defer 2
    :straight nil
    :general
    (:keymaps '(org-agenda-mode-map)
     :states '(normal motion)
     "J" 'tm/org-agenda-next-header
     "K" 'tm/org-agenda-previous-header
     "gH" 'org-habit-toggle-display-in-agenda
     "<backtab>" 'origami-toggle-node)

    :init
    (require 'evil-org)
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)

    :hook
    (find-file . tm/enable-minor-mode-based-on-extension)
    (org-agenda-finalize . tm/org-super-agenda-origami-fold-default)

    :config
    (require 'org-habit)
    (setq org-clock-idle-time 5
          ;; calendar.org has gotten very large and I received an error
          ;; indicating this variable should be increased
          undo-outer-limit 25170000
          ;; Enables journal files in agenda views.
          org-journal-enable-agenda-integration t
          ;; Files that `org-agenda' uses to populate its commands/views
          org-agenda-files `(,(concat org-base-directory "mobile-capture.org")
                             ,(concat org-base-directory "capture.org")
                             ,(concat org-base-directory "notes.org")
                             ,(concat org-base-directory "todo.org"))
          ;; Don't show scheduled TODOs in `org-agenda'
          org-agenda-todo-ignore-scheduled t

          ;; Tell `org-agenda' to use `current-buffer' to avoid destroying
          ;; precious window layouts
          org-agenda-window-setup 'current-window
          ;; The following variables make agenda separators look nicer
          ;; ﹌
          org-agenda-block-separator 65100
          ;; ✔
          org-habit-completed-glyph 10004
          ;; × 𝚇
          org-habit-today-glyph 120455
          org-agenda-current-time-string (format "⁕⁕⁕⁕  %s  ⁕⁕⁕⁕"
                                                 (propertize "🕖"
                                                             :foreground "#F94FA0"
                                                             :weight 'bold))
          org-habit-graph-column 45
          org-habit-show-habits-only-for-today nil)

    ;; Activate `auto-revert-mode' for calendar.org
    (add-to-list 'tm/auto-minor-mode-alist
                 '("homecal.org" . auto-revert-mode))
    (add-to-list 'tm/auto-minor-mode-alist
                 '("workcal.org" . auto-revert-mode))
    (add-to-list 'tm/auto-minor-mode-alist
                 '("oncallcal.org" . auto-revert-mode))
    (dolist (file org-agenda-files nil)
      (add-to-list 'tm/auto-minor-mode-alist
                   `(,file . auto-revert-mode)))

    ;; Create `org-agenda' custom commands
    (setq org-agenda-custom-commands
          `(("b" "Daily agenda for both work and home"
             ((agenda
               ""
               ((org-agenda-todo-ignore-scheduled 'past)
                (org-agenda-time-grid (quote
                                       ((daily today remove-match)
                                        (300 600 900 1200 1500 1800 2100)
                                        "......" "----------------")))
                (org-agenda-span 'day)
                (org-super-agenda-groups
                 '((:name "Trash"
                    :discard (:tag "HABIT"))))
                (org-agenda-hide-tags-regexp
                 (rx (or (and (not (in "H"))
                              (not (in "O"))
                              (not (in "M"))
                              (not (in "E")))
                         (and (not (in "W"))
                              (not (in "O"))
                              (not (in "R"))
                              (not (in "K"))))))))
              (tags
               "+REFILE"
               ((org-agenda-files '("~/org/mobile-capture.org"))
                (org-agenda-prefix-format
                 ,(concat "    %5(org-entry-get nil \"MODIFIED\") "))
                (org-agenda-sorting-strategy '(effort-down))
                (org-agenda-cmp-user-defined (tm/org-cmp-date-property
                                              "MODIFIED"))
                (org-agenda-sorting-strategy '(user-defined-down))
                (org-agenda-hide-tags-regexp
                 (rx (zero-or-more anything)))))
              (tags
               "/DONE|TODO|WAIT|CANCELLED|PROJECT"
               ((org-agenda-files '("~/org/todo.org"))
                (org-agenda-prefix-format
                 ,(concat "    %5(org-entry-get nil \"MODIFIED\") "))
                (org-agenda-todo-ignore-scheduled t)
                (org-agenda-sorting-strategy '(effort-down))
                (org-agenda-cmp-user-defined (tm/org-cmp-date-property
                                              "MODIFIED"))
                (org-agenda-sorting-strategy '(user-defined-down))
                (org-agenda-hide-tags-regexp
                 (rx (zero-or-more anything)))
                (org-super-agenda-groups
                 '((:name "Archive DONE tasks"
                    :todo ("DONE" "CANCELLED")
                    :order 5)
                   (:name "WAITing tasks"
                    :todo "WAIT"
                    :discard (:scheduled t)
                    :order 1)
                   (:name "Refileable items"
                    :tag "REFILE"
                    :discard (:scheduled t :tag "HOME")
                    :order 3)
                   (:name "Attic: Tasks for the Future"
                    :tag "FUTURE"
                    :order 4)
                   (:name "Projects"
                    :todo "PROJECT"
                    :order 2)
                   (:name "Unscheduled Tasks"
                    :todo "TODO"
                    :order 0)))))))
            ("w" . "Work agenda views")
            ("wt" "Today's work agenda"
             ((agenda
               ""
               ((org-agenda-todo-ignore-scheduled 'past)
                (org-agenda-time-grid (quote
                                       ((daily today remove-match)
                                        (300 600 900 1200 1500 1800 2100)
                                        "......" "----------------")))
                (org-agenda-span 'day)
                (org-super-agenda-groups
                 '((:name "Trash"
                    :discard (:tag "HOME"))
                   (:name "Schedule"
                    :anything t)))
                (org-agenda-hide-tags-regexp
                 (rx (zero-or-more anything)))))
              (tags
               "+REFILE"
               ((org-agenda-prefix-format
                 ,(concat "    %5(org-entry-get nil \"MODIFIED\") "))
                (org-agenda-sorting-strategy '(effort-down))
                (org-agenda-cmp-user-defined (tm/org-cmp-date-property
                                              "MODIFIED"))
                (org-agenda-sorting-strategy '(user-defined-down))
                (org-agenda-hide-tags-regexp
                 (rx (zero-or-more anything)))))
              (tags
               "/DONE|TODO|WAIT|CANCELLED|PROJECT"
               ((org-agenda-prefix-format
                 ,(concat "    %5(org-entry-get nil \"MODIFIED\") "))
                (org-agenda-todo-ignore-scheduled t)
                (org-agenda-sorting-strategy '(effort-down))
                (org-agenda-cmp-user-defined (tm/org-cmp-date-property
                                              "MODIFIED"))
                (org-agenda-sorting-strategy '(user-defined-down))
                (org-agenda-hide-tags-regexp
                 (rx (zero-or-more anything)))
                (org-super-agenda-groups
                 '((:name "Trash"
                    :discard (:tag "HOME"))
                   (:name "Archive DONE tasks"
                    :todo ("DONE" "CANCELLED")
                    :order 5)
                   (:name "WAITing tasks"
                    :todo "WAIT"
                    :discard (:scheduled t)
                    :order 1)
                   (:name "Refileable items"
                    :tag "REFILE"
                    :discard (:scheduled t :tag "HOME")
                    :order 3)
                   (:name "Attic: Tasks for the Future"
                    :tag "FUTURE"
                    :order 4)
                   (:name "Projects"
                    :todo "PROJECT"
                    :order 2)
                   (:name "Unscheduled Tasks"
                    :todo "TODO"
                    :order 0)))))))
            ("h" . "Home agenda views")
            ("hw" "Weekly home agenda"
             ((agenda
               ""
               ((org-agenda-todo-ignore-scheduled 'past)
                (org-agenda-time-grid (quote
                                       ((daily today remove-match)
                                        (300 600 900 1200 1500 1800 2100)
                                        "......" "----------------")))
                (org-agenda-span 'week)))
              (todo
               "TODO"
               ((org-agenda-prefix-format
                 ,(concat "    %5(org-entry-get nil \"MODIFIED\") "))
                (org-agenda-todo-ignore-scheduled t)
                (org-agenda-sorting-strategy '(effort-down))
                (org-agenda-hide-tags-regexp
                 (rx (zero-or-more anything)))
                (org-agenda-tag-filter-preset '("-FUTURE"))))))
            ("ht" "Today's home agenda"
             ((agenda
               ""
               ((org-agenda-todo-ignore-scheduled 'past)
                (org-agenda-time-grid (quote
                                       ((daily today remove-match)
                                        (300 600 900 1200 1500 1800 2100)
                                        "......" "----------------")))
                (org-agenda-span 'day)
                (org-agenda-hide-tags-regexp
                 (rx (zero-or-more anything)))))
              (todo
               "TODO"
               ((org-agenda-prefix-format
                 ,(concat "    %5(org-entry-get nil \"MODIFIED\") "))
                (org-agenda-sorting-strategy '(effort-down))
                (org-agenda-cmp-user-defined (tm/org-cmp-date-property
                                              "MODIFIED"))
                (org-agenda-sorting-strategy '(user-defined-down))
                (org-agenda-hide-tags-regexp (rx
                                              (zero-or-more anything)))
                (org-super-agenda-groups
                 '((:name "Refileable items."
                    :tag "REFILE"
                    :discard (:scheduled t :tag "WORK")
                    :order 2)
                   (:name "Attic: Tasks for the Future."
                    :tag "FUTURE"
                    :order 1)
                   (:name "Unscheduled Tasks."
                    :todo "TODO"
                    :order 0))))))))))
#+END_SRC

**** TODO Remap =org-promote= and =org-demote= in insert mode      :easy:
:PROPERTIES:
:HASH:     9eacc618226a551a40309b276dd33f9a
:MODIFIED: [2019-07-05 Fri 16:32]
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-06-28 Fri 11:09]
:END:

*** Org-super-agenda
:PROPERTIES:
:HASH:     5331ccd811c69036ae02ae4f725fefe8
:MODIFIED: [2019-07-05 Fri 21:11]
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org-super-agenda
    :config
    (evil-set-initial-state 'org-super-agenda-mode 'motion)
    (org-super-agenda-mode)
    (setq org-super-agenda-header-map
          (progn (copy-keymap org-agenda-mode-map)
                 (evil-org-agenda-set-keys)))
    (use-package origami
      :hook
      (org-agenda-mode . origami-mode))
    (require 'origami))
#+END_SRC

*** WAIT [[https://github.com/spegoraro/org-alert][org-alert]]                                                  :easy:
:PROPERTIES:
:HASH:     861f919c0092950bef5e452b3852c0cd
:MODIFIED: [2019-07-05 Fri 15:31]
:END:
:LOGBOOK:
- State "WAIT"       from "TODO"       [2019-07-05 Fri 15:30] \\
  Waiting on function for dunst auto start/stop
- State "TODO"    from ""        [2019-06-30 Sun 20:31]
:END:

#+begin_quote
Provides notifications for scheduled or deadlined agenda entries.
#+end_quote

** =org-capture=
:PROPERTIES:
:HASH:     5875814b58c8c446af65524cf9947006
:MODIFIED: [2020-01-07 Tue 13:51]
:END:

*** Config
:PROPERTIES:
:HASH:     a34271fccd022165edd6cdb810baa47e
:MODIFIED: [2019-09-24 Tue 08:13]
:END:

#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :straight nil
    :after (org)
    :config
    (tm/org-get-headings-command todo "todo.org")
    (tm/org-get-headings-command notes "notes.org")
    (tm/org-get-headings-command config "main.org")

    ;; Set default capture file
    (setq org-default-notes-file "~/org/capture.org")

    (setq
     org-capture-templates
     `(
       ("j" "Journal entry" entry
        ;; Target
        (function (lambda ()
                    (org-journal-new-entry t)
                    (goto-char (point-min))))
        ,(concat "* %(format-time-string org-journal-time-format)"
                 "%^{Title}\n"
                 ":LOGBOOK:\n"
                 "- State \"TODO\"    from \"\"        %U\n"
                 ":END:\n\n"
                 "%i%?"))

       ("c" "Emacs configuration change" entry
        ;; Target
        (file+function "~/.emacs.d/main.org" tm/org-get-headings-config)
        ;; Template
        ,(concat "* TODO %?\n"
                 ":LOGBOOK:\n"
                 "- State \"TODO\"    from \"\"        %U\n"
                 ":END:\n")
        :empty-lines 1)

       ("d" "Doing now (switch clocked task)" entry
        ;; Target
        (file+function "~/org/todo.org" tm/org-get-headings-todo)
        ;; Template
        ,(concat "* TODO %?\n"
                 ":LOGBOOK:\n"
                 "- State \"TODO\"    from \"\"        %U\n"
                 ":END:\n")
        :empty-lines 1
        :clock-in t
        :clock-keep t)

       ("t" "Task" entry
        ;; Target
        (file+function "~/org/todo.org" tm/org-get-headings-todo)
        ;; Template
        ,(concat "* TODO %?\n"
                 ":LOGBOOK:\n"
                 "- State \"TODO\"    from \"\"        %U\n"
                 ":END:\n")
        :empty-lines 1)

       ("n" "Note" entry
        ;; Target
        (file+function "~/org/notes.org" tm/org-get-headings-notes)
        ;; Template
        ,(concat "* %?\n"
                 ":LOGBOOK:\n"
                 "- State \"\"        from \"\"        %U\n"
                 ":END:\n")
        :empty-lines 1)

       ("l" "Link" entry
        ;; Target
        (file+function "~/org/notes.org" tm/org-get-headings-notes)
        ;; Template
        ,(concat "* %(format-time-string org-journal-time-format) "
                 "%(org-web-tools--org-link-for-url) :link:\n\n"
                 ":LOGBOOK:\n"
                 "- State \"\"        from \"\"        %U\n"
                 ":END:\n\n"
                 "%?")
        :empty-lines 1)

       ;; `org-capture' browser extension templates
       ("p" "Link with quote for org-protocol" entry
        ;; Target
        (file+function "~/org/notes.org" tm/org-get-headings-notes)
        ;; Template
        ,(concat
          "* %^{Title}\n"
          ":LOGBOOK:\n"
          "- State \"\"        from \"\"        %U\n"
          ":END:\n\n"
          "Source: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?"
          "%(progn (setq tm/delete-frame-after-capture 2)")
        :empty-lines 1)

       ("L" "Link for org-protocol" entry
        ;; Target
        (file+function "~/org/notes.org" tm/org-get-headings-notes)
        ;; Template
        ,(concat
          "%(org-web-tools--url-as-readable-org \"%:link\")"
          "%?")
        :empty-lines 1))))
#+END_SRC

*** Org-web-tools
:PROPERTIES:
:HASH:     2cc90080db3d85c1e6490a89b6be2030
:MODIFIED: 2019-06-29 12:03:34
:END:

[[https://github.com/alphapapa/org-web-tools][org-web-tools]]

#+BEGIN_SRC emacs-lisp
  (use-package org-web-tools
    :straight t)
#+END_SRC

*** [[https://addons.mozilla.org/en-US/firefox/addon/org-capture/][=org-capture= Extension]]
:PROPERTIES:
:HASH:     fa9622fe701be083f443c39ebcba41f8
:MODIFIED: 2019-06-30 10:25:16
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-06-26 Wed 14:20]
:END:

[[https://github.com/sprig/org-capture-extension][On GitHub.]]

#+begin_quote
This is an extension for Google Chrome (tm) and Firefox (tm) which
adds a "Capture" button.
#+end_quote

*** TODO Prompt for tag with org-capture Emacs config template
:PROPERTIES:
:HASH:     8fe275d1c7906934ff1778b6f2b5b19f
:MODIFIED: [2019-08-23 Fri 09:20]
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-07-03 Wed 15:23]
:END:

** [[https://github.com/marcinkoziej/org-pomodoro][org-pomodoro]]
:PROPERTIES:
:HASH:     672da6c31ce9b479111e20600f3b01e7
:MODIFIED: [2020-01-08 Wed 10:48]
:END:

#+begin_quote
pomodoro technique for org-mode
#+end_quote

#+begin_src emacs-lisp
  (use-package org-pomodoro
    :general
    (:keymaps 'org-agenda-mode-map
     :states '(normal motion)
     "gp" 'org-pomodoro)
    :config
    (advice-add 'org-pomodoro-notify
                :override (lambda (title message)
                            "Send a desktop notification with TITLE and MESSAGE.
  Use `notifications-notify' instead of `alert'."
                            (notifications-notify :title title
                                                  :body message))))
#+end_src

** [[https://github.com/emacsmirror/org-variable-pitch/blob/master/org-variable-pitch.el][org-variable-pitch]]
:PROPERTIES:
:HASH:     4216d5bc63803efcb7df9bcc6e13de8c
:MODIFIED: [2020-01-08 Wed 10:48]
:END:

#+begin_quote
Variable-pitch support for org-mode.
#+end_quote

#+begin_src emacs-lisp
  (use-package org-variable-pitch
    :diminish org-variable-pitch-minor-mode
    :hook
    (org-mode . org-variable-pitch-minor-mode)
    :custom
    (org-variable-pitch-fixed-font "DejaVu Sans mono")
    :init
    (require 'org-indent))
#+end_src

** [[https://github.com/bastibe/org-journal][org-journal]]
:PROPERTIES:
:HASH:     7bc94fa8e7ef9e5be9b83041b3dc389b
:MODIFIED: [2020-01-07 Tue 13:51]
:END:

#+begin_quote
A simple org-mode based journaling mode
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :general
    (tm/leader-def
      :infix "j"
      :prefix-command 'tm/org-journal-prefix-command
      :prefix-map 'tm/org-journal-prefix-map
      "" '(:which-key "org-journal prefix" :ignore t)
      "c" 'org-journal-new-entry
      "l" 'org-journal-next-entry
      "h" 'org-journal-previous-entry)
    :custom
    (org-journal-dir "~/org/work/journal")
    (org-journal-file-type 'weekly)
    (org-journal-enable-agenda-integration t)
    (org-journal-file-format "%Y%m%d.org")
    (org-journal-enable-encryption t)
    (org-journal-encrypt-journal t))
#+END_SRC

** org-notify
:PROPERTIES:
:HASH:     c8eb48af3f048c5c18ba799e1367e929
:MODIFIED: [2020-01-08 Wed 10:47]
:END:

#+begin_src emacs-lisp
  (use-package org-notify
    :straight nil
    :demand t
    :after 'org
    :config
    (setq user-mail-address "thomas.minor@usg.edu")
    (org-notify-add 'todo
                    '(:time "15m" :period "20s" :duration 10
                      :actions (-notify/window -message))
                    '(:time "5m" :period "20s" :duration 10
                      :actions (-notify/window -message))
                    '(:time "1m" :period "20s" :duration 10
                      :actions (-notify/window -message -ding))))
#+end_src

** PDFs
:PROPERTIES:
:HASH:     81ed0414e9049c67138b55f758d3d1fe
:MODIFIED: [2019-09-05 Thu 09:09]
:END:

*** [[https://github.com/politza/pdf-tools][=pdf-tools=]]
:PROPERTIES:
:HASH:     70c2c9aba903edbd01d23cba1df0d99c
:MODIFIED: [2019-09-05 Thu 09:06]
:END:

#+begin_quote
PDF Tools is, among other things, a replacement of DocView for PDF
files. The key difference is that pages are not pre-rendered by
e.g. ghostscript and stored in the file-system, but rather created
on-demand and stored in memory.
#+end_quote

*** [[https://github.com/fuxialexander/org-noter/tree/pdf-notes-booster][=org-noter=]]
:PROPERTIES:
:HASH:     559f42b31bbed4cf43af5e671cb94a48
:MODIFIED: [2019-09-05 Thu 09:06]
:END:

#+begin_quote
Org-noter's purpose is to let you create notes that are kept in
sync when you scroll through the document, but that are external to
it - the notes themselves live in an Org-mode file.
#+end_quote

** org-caldav
:PROPERTIES:
:HASH:     37d21b3379b55735d6ccd346718eaba7
:MODIFIED: [2020-01-07 Tue 15:04]
:END:

#+begin_src emacs-lisp
  ;; (use-package org-caldav
  ;;   :straight
  ;;   (:host github :repo "dengste/org-caldav")
  ;;   :init
  ;;   (setq org-caldav-delete-org-entries 'never)
  ;;   (setq org-caldav-resume-aborted 'always)
  ;;   (setq org-caldav-show-sync-results nil)
  ;;   (setq org-icalendar-timezone "America/New_York")
  ;;   (setq org-caldav-files `(,(concat org-directory "/todo.org")))
  ;;   (setq org-caldav-inbox (concat org-directory "/calendar/org-caldav-inbox.org"))

  ;;   ;; This is the delayed sync function; it waits until emacs has been
  ;;   ;; idle for "secs" seconds before syncing.  The delay is important
  ;;   ;; because the caldav-sync can take five or ten seconds, which would
  ;;   ;; be painful if it did that right at save.  This way it just waits
  ;;   ;; until you've been idle for a while to avoid disturbing the user.
  ;;   (defvar org-caldav-sync-timer nil
  ;;     "Timer that `org-caldav-push-timer' uses to reschedule itself, or nil.")
  ;;   (defun org-caldav-sync-with-delay (secs)
  ;;     (when org-caldav-sync-timer
  ;;       (cancel-timer org-caldav-sync-timer))
  ;;     (setq org-caldav-sync-timer
  ;;           (run-with-idle-timer
  ;;            (* 1 secs) nil 'org-caldav-sync)))

  ;;   ;; Actual calendar configuration: edit this to meet your specific
  ;;   ;; needs
  ;;   (setq org-caldav-uuid-extension ".EML")
  ;;   (setq org-caldav-calendars
  ;;         '((:calendar-id "calendar"
  ;;            :url "http://localhost:1080/users/thomas.minor@usg.edu"
  ;;            :files ("~/org/todo.org")
  ;;            :inbox "~/org/calendar/org-caldav-inbox.org")
  ;;           (:calendar-id "on-call"
  ;;            :url "http://localhost:1080/users/thomas.minor@usg.edu"
  ;;            :inbox "~/org/calendar/on-call.org")))

  ;;   (setq org-caldav-backup-file "~/org/calendar/org-caldav-backup.org")
  ;;   (setq org-caldav-save-directory "~/org/")

  ;;   :config
  ;;   (setq org-icalendar-alarm-time 1)
  ;;   ;; This makes sure to-do items as a category can show up on the
  ;;   ;; calendar
  ;;   (setq org-icalendar-include-todo t)
  ;;   ;; This ensures all org "deadlines" show up, and show up as due
  ;;   ;; dates
  ;;   (setq org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due))
  ;;   ;; This ensures "scheduled" org items show up, and show up as start
  ;;   ;; times
  ;;   (setq org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo))

  ;;   ;; :hook
  ;;   ;; Add the delayed save hook with a five minute idle timer
  ;;   (add-hook 'after-save-hook
  ;;             (lambda ()
  ;;               (when (eq major-mode 'org-mode)
  ;;                 (org-caldav-sync-with-delay 300)))))
#+end_src

** Blog publishing
:PROPERTIES:
:HASH:     318a0a9d8cb07b6550fa7367257aa87b
:MODIFIED: [2020-01-08 Wed 10:47]
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-06 Wed 08:47]
:END:

I never use this (because I never blog). I should re-evaluate this
(and blog more) and decide if moving to Hugo would be better/easier.

*** =org2jekyll=
:PROPERTIES:
:HASH:     6ff57b2cf1b901f0c27d8a42e95263eb
:MODIFIED: [2019-08-25 Sun 12:17]
:END:

Write blog posts in =org-mode= and publish them to a Jekyll site with =org2jekyll=.

Define the following variables:
- =org2jekyll-source-directory=: The directory where =*.org= blog posts are stored.
- =org2jekyll-jekyll-directory=: Path to a Jekyll site.
- =org2jekyll-posts-dir=: The directory where Jekyll posts are stored.

#+BEGIN_SRC emacs-lisp
  (use-package org2jekyll
    :defer 3
    :config
    (setq org2jekyll-blog-author "tminor"
          org2jekyll-source-directory (expand-file-name "~/org/blog")
          org2jekyll-jekyll-directory (expand-file-name "~/blog")
          org2jekyll-jekyll-drafts-dir ""
          org2jekyll-jekyll-posts-dir "_posts/"
          org-publish-project-alist
          `(("default"
             :base-directory ,(org2jekyll-input-directory)
             :base-extension "org"
             ;; :publishing-directory "/ssh:user@host:~/html/notebook/"
             :publishing-directory ,(org2jekyll-output-directory)
             :publishing-function org-html-publish-to-html
             :headline-levels 4
             :section-numbers nil
             :with-toc nil
             :html-head "<link rel=\"stylesheet\" href=\"./css/style.css\" type=\"text/css\"/>"
             :html-preamble t
             :recursive t
             :make-index t
             :html-extension "html"
             :body-only t)

            ("post"
             :base-directory ,(org2jekyll-input-directory)
             :base-extension "org"
             :publishing-directory ,(org2jekyll-output-directory org2jekyll-jekyll-posts-dir)
             :publishing-function org-html-publish-to-html
             :headline-levels 4
             :section-numbers nil
             :with-toc nil
             :html-head "<link rel='stylesheet' href='https://blog.tminor.io/assets/core.css'>"
             :html-preamble t
             :recursive t
             :make-index t
             :html-extension "html"
             :body-only t)

            ("images"
             :base-directory ,(org2jekyll-input-directory "img")
             :base-extension "jpg\\|gif\\|png"
             :publishing-directory ,(org2jekyll-output-directory "img")
             :publishing-function org-publish-attachment
             :recursive t)

            ("js"
             :base-directory ,(org2jekyll-input-directory "js")
             :base-extension "js"
             :publishing-directory ,(org2jekyll-output-directory "js")
             :publishing-function org-publish-attachment
             :recursive t)

            ("css"
             :base-directory ,(org2jekyll-input-directory "css")
             :base-extension "css\\|el"
             :publishing-directory ,(org2jekyll-output-directory "css")
             :publishing-function org-publish-attachment
             :recursive t)

            ("web" :components ("images" "js" "css")))))
#+END_SRC

*** Creating a Blog Post
:PROPERTIES:
:HASH:     d628231bc1be949d8580001a964548b3
:MODIFIED: 2019-03-08 15:50:43
:END:

1. Invoke =org2jekyll-create-draft=, select your layout and follow the prompts in the mini buffer.
2. Write your post.
3. Publish it with =org2jekyll-publish=.

** Finance
:PROPERTIES:
:HASH:     4a07271045f6dc0600f04d3b00412d17
:MODIFIED: [2019-10-12 Sat 11:30]
:END:

*** [[https://github.com/ledger/ledger-mode][=ledger-mode=]]
:PROPERTIES:
:HASH:     468bb95d8e99638d9b762244af724ab2
:MODIFIED: [2020-01-02 Thu 14:09]
:END:

#+begin_quote
Emacs Lisp files for interacting with the C++Ledger accounting system
#+end_quote

#+begin_src emacs-lisp
  ;; (use-package ledger-mode
  ;;   :straight
  ;;   (:host github :repo "ledger/ledger-mode"))
#+end_src

* Shell and Term Modes
:PROPERTIES:
:HASH:     7c791981d7972ac86100ae2ec527dbae
:MODIFIED: 2019-03-08 15:48:05
:END:

** Term-mode
:PROPERTIES:
:HASH:     00b998b9a2db835c11e0c2d26777e401
:MODIFIED: 2019-06-28 16:56:43
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-04 Mon 16:50]
:END:

Moving to using Emacs as a primary terminal emulator is probably
something I should work towards.

#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :config
    ;; I'm not quite sure what this does; it was in my init.el (it was
    ;; added by `custom.el')
    (setq ansi-color-faces-vector
          [default bold shadow italic underline bold bold-italic bold])
    (setq ansi-color-names-vector
          (vector "#ffffff"
                  "#f36c60"
                  "#8bc34a"
                  "#fff59d"
                  "#4dd0e1"
                  "#b39ddb"
                  "#81d4fa"
                  "#263238")))
#+END_SRC

** Eshell
:PROPERTIES:
:HASH:     8076a1dc2497b7682ed6f5caea168a65
:MODIFIED: 2019-06-28 16:56:43
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-04 Mon 16:51]
:END:

*** =egp= (=eshell-prompt-extras=)
:PROPERTIES:
:HASH:     f3736f30a89218c7c73318bbf611993a
:MODIFIED: 2019-06-23 17:24:41
:END:

=eshell= prompt theme from [[https://github.com/dieggsy/dotfiles/blob/master/emacs/.emacs.d/lisp/egp.el][here]].

#+BEGIN_SRC emacs-lisp
  (use-package egp
    :straight
    (dotfiles :host github :repo "dieggsy/dotfiles"
	 :files (("emacs/.emacs.d/lisp/egp.el" . "egp.el")))
    :commands egp-theme)
#+END_SRC

*** =eshell-mode=
:PROPERTIES:
:HASH:     f0f28c1477b3839e14c10016dad2f198
:MODIFIED: [2020-01-02 Thu 14:44]
:END:

Configure =eshell= to use [[https://github.com/manateelazycat/aweshell][aweshell]] and =egp=.

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :init
    (require 'egp)
    (require 'tm-eshell)
    :custom
    (eshell-prompt-function #'egp-theme)
    :config
    (when (and (executable-find "fish")
               (require 'fish-completion nil t))
      (global-fish-completion-mode)))
#+END_SRC

*** [[https://github.com/dieggsy/esh-autosuggest][=esh-autosuggest=]]
:PROPERTIES:
:HASH:     42b0cd36641a7487f8c7d3fb46c77b12
:MODIFIED: [2019-08-25 Sun 12:20]
:END:

#+begin_quote
Fish-like history autosuggestions in eshell
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package esh-autosuggest
    :hook
    (eshell-mode . esh-autosuggest-mode)
    (eshell-mode . tm/setup-eshell-ivy-completion))
#+END_SRC

*** [[https://gitlab.com/ambrevar/emacs-fish-completion][=fish-completion=]]
:PROPERTIES:
:HASH:     299e4e28879f06d9c8da79c59b877654
:MODIFIED: 2019-06-23 18:56:24
:END:

#+begin_quote
This package extends the pcomplete completion framework with
completion from the fish shell.
#+end_quote

#+begin_src emacs-lisp
  (use-package fish-completion
    :straight (:host gitlab :repo "ambrevar/emacs-fish-completion"))
#+end_src

*** =exec-path-from-shell=
:PROPERTIES:
:HASH:     8de797543eba2a8a68ec4d109786b24c
:MODIFIED: [2020-01-02 Thu 14:51]
:END:

Get environment variables from =$SHELL=.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :init (require 'exec-path-from-shell)
    :config
    (setq tm/environment-variables '("REPODIR"
                                     "RUBYLIB"
                                     "RUBYBINDIR"
                                     "PUPPETDIR"
                                     "PATH"))
    (dolist (env-var tm/environment-variables)
      (add-to-list 'exec-path-from-shell-variables env-var))
    ;; https://github.com/purcell/exec-path-from-shell/issues/87
    (setq exec-path-from-shell-arguments '("-l"))
    ;; https://github.com/syl20bnr/spacemacs/issues/4755
    (setq explicit-shell-file-name "/bin/bash")
    (setq shell-file-name "bash"))
#+END_SRC

*** [[https://github.com/manateelazycat/aweshell][=aweshell=]]
:PROPERTIES:
:HASH:     53f590d7b8635db95c22c4fe29549628
:MODIFIED: [2020-01-07 Tue 15:45]
:END:

#+begin_quote
Various extensions to Eshell.
#+end_quote

#+begin_src emacs-lisp
  (use-package aweshell
    :after (eshell-up)
    :general
    (tm/leader-def
      :infix "E"
      :prefix-command 'tm/eshell-prefix-command
      :prefix-map 'tm/eshell-prefix-map
      "" '(:which-key "eshell prefix" :ignore t)
      "n" 'aweshell-new
      "l" 'aweshell-next
      "h" 'aweshell-prev
      "b" 'aweshell-switch-buffer
      "u" 'eshell-up)
    :straight (:type git :host github :repo "manateelazycat/aweshell"
               :files ("*aweshell.el"))
    :init
    (setq aweshell-valid-command-color "#3EDAD4")
    (exec-path-from-shell-initialize))
#+end_src

*** [[https://github.com/peterwvj/eshell-up][=eshell-up=]]
:PROPERTIES:
:HASH:     b81770dccb9cf044f03f1259287031e4
:MODIFIED: 2019-06-23 12:21:28
:END:

#+begin_quote
Emacs package for quickly navigating to a specific parent directory in
eshell without having to repeatedly typing =cd ..=.
#+end_quote

#+begin_src emacs-lisp
  (use-package eshell-up
    :straight (:type git :host github :repo "peterwvj/eshell-up"))
#+end_src

*** [[https://github.com/ryuslash/eshell-fringe-status][=eshell-fringe-status=]]
:PROPERTIES:
:HASH:     dcd151f7c7e45dd46ae615179deb9c1c
:MODIFIED: 2019-06-23 17:47:16
:END:

#+begin_quote
Show an indicator of the status of the last command run in Eshell.
#+end_quote

#+begin_src emacs-lisp
  (use-package eshell-fringe-status
    :hook
    (eshell-mode . eshell-fringe-status-mode))
#+end_src

** SSH/GPG keys
:PROPERTIES:
:HASH:     dbb0127da65e33d98ffe2017f496efa3
:MODIFIED: 2019-06-23 11:58:21
:END:

Install =keychain-environment= so Emacs can use [[https://github.com/funtoo/keychain][keychain]] to access SSH
and GPG keys.

#+BEGIN_SRC emacs-lisp
  (use-package keychain-environment
    :init
    (keychain-refresh-environment))
#+END_SRC

* =prog-mode=
:PROPERTIES:
:HASH:     4b0ae647dcf28e0d1682c2700a721dc1
:MODIFIED: [2020-01-08 Wed 11:28]
:END:

#+begin_src emacs-lisp
  (use-package prog-mode
    :straight nil
    :hook
    (prog-mode . display-line-numbers-mode))
#+end_src

** Language modes
:PROPERTIES:
:HASH:     02c483ea42588716a19c373a00cdf8dd
:MODIFIED: 2019-03-08 15:50:42
:END:

Syntax highlighting, etc.

*** Bash/Shell
:PROPERTIES:
:HASH:     0f716d06eaa31eebe7fb20d76880a08d
:MODIFIED: 2019-06-21 11:43:16
:END:

#+BEGIN_SRC emacs-lisp
  (use-package sh-script
    :config
    (setq sh-basic-offset 2))
#+END_SRC

*** CoffeeScript
:PROPERTIES:
:HASH:     17c6c7a3c61e8c679a427ef0a20c0a8a
:MODIFIED: [2019-09-06 Fri 08:00]
:END:

**** [[https://github.com/defunkt/coffee-mode][=coffee-mode=]]
:PROPERTIES:
:HASH:     8b0dd9cd4080bc1d3d4561124634e40d
:MODIFIED: [2019-09-06 Fri 08:03]
:END:

#+begin_quote
An Emacs major mode for CoffeeScript and IcedCoffeeScript.
#+end_quote

#+begin_src emacs-lisp
  (use-package coffee-mode
    :custom
    (coffee-tab-width 2))
#+end_src

*** Clojure
:PROPERTIES:
:HASH:     89c0a5a4d29d7847d9824f89b03f28c8
:MODIFIED: [2020-01-02 Thu 15:25]
:END:

**** [[https://github.com/clojure-emacs/cider][cider]]
:PROPERTIES:
:HASH:     baa6803f64a2af764f4be2491735ab5f
:MODIFIED: [2020-01-03 Fri 08:16]
:END:

#+begin_quote
The Clojure Interactive Development Environment that Rocks for Emacs
#+end_quote

#+begin_src emacs-lisp
  (use-package cider
    :defer t
    :config
    (setq cider-repl-history-file ".cider-repl-history"
          nrepl-log-messages t)
    (flycheck-clojure-setup))
#+end_src

**** [[https://github.com/clojure-emacs/clojure-mode][clojure-mode]]
:PROPERTIES:
:HASH:     e364db51e57a002f61329007115c0bdc
:MODIFIED: [2020-01-04 Sat 11:02]
:END:

#+begin_quote
Emacs support for the Clojure(Script) programming language
#+end_quote

#+begin_src emacs-lisp
  (use-package clojure-mode
    :config
    (require 'flycheck-clj-kondo)
    (require 'flycheck-joker)
    (dolist (checker '(clj-kondo-clj
                       clj-kondo-cljs
                       clj-kondo-cljc
                       clj-kondo-edn))
      (setq flycheck-checkers
            (cons checker
                  (delq checker flycheck-checkers))))
    (dolist (checkers '((clj-kondo-clj . clojure-joker)
                        (clj-kondo-cljs . clojurescript-joker)
                        (clj-kondo-cljc . clojure-joker)
                        (clj-kondo-edn . edn-joker)))
      (flycheck-add-next-checker (car checkers)
                                 (cons 'error (cdr checkers))))
    :hook
    (clojure-mode . lispy-mode)
    (clojure-mode . lispyville-mode))
#+end_src

**** Linting
:PROPERTIES:
:HASH:     4e959b8f81031c8f29e16f95649df9e5
:MODIFIED: [2020-01-04 Sat 10:42]
:END:

***** [[https://github.com/borkdude/flycheck-clj-kondo][flycheck-clj-kondo]]
:PROPERTIES:
:HASH:     b5f72928969c7b8b355b40fd4c45565b
:MODIFIED: [2020-01-04 Sat 10:44]
:END:

#+begin_quote
Emacs integration for clj-kondo via flycheck
#+end_quote

#+begin_src emacs-lisp
  (use-package flycheck-clj-kondo)
#+end_src

***** [[https://github.com/candid82/flycheck-joker][flycheck-joker]]
:PROPERTIES:
:HASH:     b34d3dbedbfda2d58f79d543f2a45787
:MODIFIED: [2020-01-04 Sat 10:47]
:END:

#+begin_quote
Clojure syntax checker (via Joker) for flycheck
#+end_quote

#+begin_src emacs-lisp
  (use-package flycheck-joker)
#+end_src

*** Emacs Lisp
:PROPERTIES:
:HASH:     ad5a105b220494b51875db198752a4e2
:MODIFIED: [2019-08-25 Sun 09:59]
:END:

**** Formatting
:PROPERTIES:
:HASH:     a0d0cf2bb986e44e84f29d791e2501a4
:MODIFIED: 2019-03-08 15:50:42
:END:

***** Indent keywords properly
:PROPERTIES:
:HASH:     29985167ef0c41b122b4f52b267292ff
:MODIFIED: [2019-08-25 Sun 09:59]
:END:

By default, =lisp-indent-function= indents =:keywords= improperly:

#+BEGIN_QUOTE
(:token token
        :token-quality quality)
#+END_QUOTE

To fix this, define a new function to use for =lisp-indent-function=
(solution found [[https://emacs.stackexchange.com/a/10233][here]]):

#+BEGIN_SRC emacs-lisp
  (eval-after-load "lisp-mode"
    '(defun tm/lisp-indent-function (indent-point state)
       "This function is the normal value of the variable `lisp-indent-function'.
  The function `calculate-lisp-indent' calls this to determine
  if the arguments of a Lisp function call should be indented specially.
  INDENT-POINT is the position at which the line being indented begins.
  Point is located at the point to indent under (for default indentation);
  STATE is the `parse-partial-sexp' state for that position.
  If the current line is in a call to a Lisp function that has a non-nil
  property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
  it specifies how to indent.  The property value can be:
  ,* `defun', meaning indent `defun'-style
    \(this is also the case if there is no property and the function
    has a name that begins with \"def\", and three or more arguments);
  ,* an integer N, meaning indent the first N arguments specially
    (like ordinary function arguments), and then indent any further
    arguments like a body;
  ,* a function to call that returns the indentation (or nil).
    `lisp-indent-function' calls this function with the same two arguments
    that it itself received.
  This function returns either the indentation to use, or nil if the
  Lisp function does not specify a special indentation."
       (let ((normal-indent (current-column))
             (orig-point (point)))
         (goto-char (1+ (elt state 1)))
         (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
         (cond
          ;; car of form doesn't seem to be a symbol, or is a keyword
          ((and (elt state 2)
                (or (not (looking-at "\\sw\\|\\s_"))
                    (looking-at ":")))
           (if (not (> (save-excursion (forward-line 1) (point))
                       calculate-lisp-indent-last-sexp))
               (progn (goto-char calculate-lisp-indent-last-sexp)
                      (beginning-of-line)
                      (parse-partial-sexp (point)
                                          calculate-lisp-indent-last-sexp 0 t)))
           ;; Indent under the list or under the first sexp on the same line as
           ;; calculate-lisp-indent-last-sexp.  Note that first thing on that
           ;; line has to be complete sexp since we are inside the innermost
           ;; containing sexp.
           (backward-prefix-chars)
           (current-column))
          ((and (save-excursion
                  (goto-char indent-point)
                  (skip-syntax-forward " ")
                  (not (looking-at ":")))
                (save-excursion
                  (goto-char orig-point)
                  (looking-at ":")))
           (save-excursion
             (goto-char (+ 2 (elt state 1)))
             (current-column)))
          (t
           (let ((function (buffer-substring (point)
                                             (progn (forward-sexp 1) (point))))
                 method)
             (setq method (or (function-get (intern-soft function)
                                            'lisp-indent-function)
                              (get (intern-soft function) 'lisp-indent-hook)))
             (cond ((or (eq method 'defun)
                        (and (null method)
                             (> (length function) 3)
                             (string-match "\\`def" function)))
                    (lisp-indent-defform state indent-point))
                   ((integerp method)
                    (lisp-indent-specform method state
                                          indent-point normal-indent))
                   (method
                    (funcall method indent-point state)))))))))
#+END_SRC

**** [[https://github.com/joddie/macrostep][=macrostep=]]
:PROPERTIES:
:HASH:     b4a7b83f046c01b655d75b434fb1335b
:MODIFIED: 2019-06-25 09:24:49
:END:

#+begin_quote
An Emacs minor mode for interactively stepping through the expansion
of macros in Emacs Lisp source code.
#+end_quote

#+begin_src emacs-lisp
  (use-package macrostep
    :general
    (:keymaps 'emacs-lisp-mode-map
     :states '(normal)
     "ze" 'macrostep-expand))
#+end_src

*** Fish
:PROPERTIES:
:HASH:     bfee3b1eabe26e89422162ebcc8979ff
:MODIFIED: [2020-01-02 Thu 13:14]
:END:

**** [[https://github.com/emacsmirror/fish-mode][fish-mode]]
:PROPERTIES:
:HASH:     ea9e8a009774e20ef7ca5c89e6f11bcf
:MODIFIED: [2020-01-03 Fri 08:14]
:END:

#+begin_quote
Major mode for fish shell scripts
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package fish-mode)
#+END_SRC

*** Go
:PROPERTIES:
:HASH:     150b42b8ffdc4d67b8aad50af5224adf
:MODIFIED: [2020-01-02 Thu 13:32]
:END:

**** [[https://github.com/dominikh/go-mode.el][go-mode.el]]
:PROPERTIES:
:HASH:     16acf1f5097c0613bbc8db31bff30e2b
:MODIFIED: [2020-01-02 Thu 13:35]
:END:

#+begin_quote
Emacs mode for the Go programming language
#+end_quote

#+begin_src emacs-lisp
  (use-package go-mode
    :straight
    (:host github :repo "dominikh/go-mode.el"))
#+end_src

**** [[https://github.com/exu/go-koans.el][go-koans.el]]
:PROPERTIES:
:HASH:     5693e9c1ce2006f773759a448676d2cf
:MODIFIED: [2020-01-02 Thu 13:33]
:END:

#+begin_quote
Go Koans helper
#+end_quote

#+begin_src emacs-lisp
  (use-package go-koans
    :straight
    (:host github :repo "exu/go-koans.el"))
#+end_src

**** [[https://github.com/weijiangan/flycheck-golangci-lint][flycheck-golangci-lint]]
:PROPERTIES:
:HASH:     968eeeddc2f9acf366aa13e19cccd635
:MODIFIED: [2020-01-02 Thu 13:36]
:END:

#+begin_quote
Flycheck checker for golangci-lint
#+end_quote

#+begin_src emacs-lisp
  (use-package flycheck-golangci-lint
    :hook
    (go-mode . flycheck-golangci-lint-setup))
#+end_src

*** Lisp
:PROPERTIES:
:HASH:     5aa080b4de63da81de3fca582aae3c63
:MODIFIED: [2020-01-02 Thu 13:20]
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-06 Wed 08:45]
:END:

[[http://sachachua.com/blog/2015/04/2015-04-08-emacs-lisp-development-tips-with-john-wiegley/][Notes]] from Sacha Chua and John Wiegly youtube video.

**** [[https://github.com/abo-abo/lispy][lispy]]
:PROPERTIES:
:HASH:     407d98c810f38943c556ffa61fe8355c
:MODIFIED: [2020-01-02 Thu 13:21]
:END:

#+begin_quote
Short and sweet LISP editing
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package lispy
      :init
      (add-hook 'emacs-lisp-mode-hook #'lispy-mode)
      (add-hook 'lisp-mode-hook #'lispy-mode))
#+END_SRC

**** [[https://github.com/noctuid/lispyville][lispyville]]
:PROPERTIES:
:HASH:     e9f970ca5b69c9411fd953cf96bd7b18
:MODIFIED: [2020-01-02 Thu 13:24]
:END:

#+begin_quote
lispy + evil = lispyville
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package lispyville
    :init
    (with-eval-after-load 'lispyville
      (lispyville-set-key-theme
       '(slurp/barf-cp
         mark-toggle)))
    (add-hook 'emacs-lisp-mode-hook #'lispyville-mode)
    (add-hook 'emacs-lisp-mode-hook
              (lambda () (setq-local lisp-indent-function
                                     #'tm/lisp-indent-function)))
    :after (lispy))
#+END_SRC

**** eldoc
:PROPERTIES:
:HASH:     10c61f8f0b26eba5e1d90f25a4d5de27
:MODIFIED: [2020-01-02 Thu 13:24]
:END:

#+begin_quote
eldoc-mode is a MinorMode which shows you, in the echo area, the
argument list of the function call you are currently writing
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish
    ;; https://github.com/jwiegley/dot-emacs/blob/4e87553c2f2d21e30be885bdfba83b40c4bf0bed/init.el
    :hook ((c-mode-common emacs-lisp-mode) . eldoc-mode))
#+END_SRC

**** [[https://github.com/tsdh/highlight-parentheses.el][highlight-parentheses.el]]
:PROPERTIES:
:HASH:     717eb79300b471ec139e83e3df939370
:MODIFIED: [2020-01-02 Thu 13:27]
:END:

#+begin_quote
Emacs: highlight surrounding parentheses
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :init
    (highlight-parentheses-mode 1)
    :hook
    (prog-mode . highlight-parentheses-mode))
#+END_SRC

*** MarkDown
:PROPERTIES:
:HASH:     c22afcf8d44fa3bff688935c72c465e7
:MODIFIED: [2020-01-02 Thu 13:08]
:END:

**** [[https://github.com/defunkt/markdown-mode][markdown-mode]]
:PROPERTIES:
:HASH:     89d51ab4209332354f1785fb4cd249fe
:MODIFIED: [2020-01-02 Thu 13:13]
:END:

#+begin_quote
Emacs Markdown mode
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC

*** Pandoc
:PROPERTIES:
:HASH:     8c47bbaa7bcb6a97fd4c4f4c18e8735f
:MODIFIED: [2020-01-02 Thu 13:10]
:END:

**** [[https://github.com/joostkremers/pandoc-mode][pandoc-mode]]
:PROPERTIES:
:HASH:     18be155fa4384a9f0ec69b4c5f11fd72
:MODIFIED: [2020-01-02 Thu 13:13]
:END:

#+begin_quote
An Emacs minor mode for interacting with Pandoc.
#+end_quote

#+begin_src emacs-lisp
  (use-package pandoc-mode
    :general
    (tm/leader-def
      "P" 'pandoc-main-hydra/body))
#+end_src

*** PHP
:PROPERTIES:
:HASH:     65a72c846dfec9a8aca09befbf23cb34
:MODIFIED: [2020-01-02 Thu 13:29]
:END:

**** [[https://github.com/emacs-php/php-mode][php-mode]]
:PROPERTIES:
:HASH:     20b236fdcaee2d8f398132c199956d59
:MODIFIED: [2020-01-02 Thu 13:30]
:END:

#+begin_quote
A PHP mode for GNU Emacs
#+end_quote

#+begin_src emacs-lisp
  (use-package php-mode
    :straight
    (:host github :repo "emacs-php/php-mode")
    :init
    (add-to-list 'auto-mode-alist
                 '("\\.\\(?:php\\|phtml\\)\\'" . php-mode)))
#+end_src

*** PowerShell
:PROPERTIES:
:HASH:     e6845f068e6e3bec1838a16219a8a243
:MODIFIED: [2020-01-02 Thu 13:03]
:END:

**** [[https://github.com/jschaf/powershell.el][powershell.el]]
:PROPERTIES:
:HASH:     bb1b285604d39ce5e7549f916d133d72
:MODIFIED: [2020-01-02 Thu 13:04]
:END:

#+begin_quote
An Emacs mode for editing and running Microsoft PowerShell code.
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package powershell)
#+END_SRC

*** Puppet
:PROPERTIES:
:HASH:     625122235887d70756449546680c50ae
:MODIFIED: [2020-01-02 Thu 13:08]
:END:

#+begin_quote
Edit Puppet 3 manifests with GNU Emacs 24
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package puppet-mode
    :config
    (setq puppet-indent-level 4))
#+END_SRC

**** [[https://github.com/petere/emacs-eruby-mode][eruby-mode]]
:PROPERTIES:
:HASH:     0b4e49c14eb4dc360c2c09b3c11d0434
:MODIFIED: [2020-01-02 Thu 13:03]
:END:

     #+begin_src emacs-lisp
       (use-package eruby-mode
	 :straight
	 (:host github :repo "petere/emacs-eruby-mode"))
     #+end_src

*** Python
:PROPERTIES:
:HASH:     9f625103bce88428993eb6320491b1a7
:MODIFIED: [2019-09-30 Mon 09:13]
:END:

**** [[https://github.com/pythonic-emacs/anaconda-mode][=anaconda-mode=]]
:PROPERTIES:
:HASH:     c223a6eef60e6f87034ca27254a65397
:MODIFIED: [2020-01-02 Thu 14:34]
:END:

#+begin_quote
Code navigation, documentation lookup and completion for Python.
#+end_quote

#+begin_src emacs-lisp
  (use-package anaconda-mode
    :demand t
    :straight
    (:host github :repo "pythonic-emacs/anaconda-mode")
    :hook
    (python-mode . '(anaconda-mode anaconda-eldoc-mode)))
#+end_src

*** Ruby
:PROPERTIES:
:HASH:     5ce3c02f090f60a3f62b5d6c91ad1bc4
:MODIFIED: [2020-01-02 Thu 13:15]
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-04 Mon 16:51]
:END:

**** [[https://github.com/zenspider/enhanced-ruby-mode][enhanced-ruby-mode]]
:PROPERTIES:
:HASH:     07bfd262222460eea7fa2acbdcb6e255
:MODIFIED: [2020-01-02 Thu 15:17]
:END:

#+begin_quote
An enhanced ruby-mode for Emacs that uses Ripper in ruby 1.9+ to
highlight and indent the source code
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package enh-ruby-mode
    :requires
    (exec-path-from-shell)
    :config
    (eval-after-load "hideshow"
      '(add-to-list
        'hs-special-modes-alist
        `(enh-ruby-mode
          ,(rx (or "def" "class" "module" "do" "{" "[" "(")) ; Block start
          ,(rx (or "}" "]" ")" "end"))		           ; Block end
          ,(rx (or "#" "=begin"))		; Comment start
          ruby-forward-sexp nil)))
    ;; https://dev.to/thiagoa/ruby-and-emacs-tip-advanced-pry-integration-33bk
    (setenv "VISUAL" "emacsclient")
    (setenv "EDITOR" (getenv "VISUAL"))
    :init
    (add-to-list 'auto-mode-alist
                 '("\\(?:\\.rb\\|ru\\|rake\\|thor\\|jbuilder\\|gemspec\\|podspec\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'"
                   . enh-ruby-mode))
    (add-to-list 'interpreter-mode-alist '("ruby" . enh-ruby-mode))
    (exec-path-from-shell-initialize)
    :hook
    (enh-ruby-mode . eldoc-mode)
    (enh-ruby-mode . yard-mode)
    (enh-ruby-mode . robe-mode))
#+END_SRC

**** [[https://github.com/dgutov/robe][robe]]
:PROPERTIES:
:HASH:     11c76a598078f8d5fb5f5b2b95ed1196
:MODIFIED: [2020-01-02 Thu 13:18]
:END:

#+begin_quote
Code navigation, documentation lookup and completion for Ruby
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package robe
    :config
    (add-hook 'ruby-mode-hook 'robe-mode)
    (eval-after-load 'company
      '(push 'company-robe company-backends)))
#+END_SRC

**** [[https://github.com/pd/yard-mode.el][yard-mode.el]]
:PROPERTIES:
:HASH:     f3ea0d783323c995ffa17dd310592c05
:MODIFIED: [2020-01-02 Thu 13:19]
:END:

#+begin_quote
Emacs minor mode for editing YARD tags
#+end_quote

#+begin_src emacs-lisp
  (use-package yard-mode)
#+end_src

*** YAML
:PROPERTIES:
:HASH:     9d5abfe35fa6fb9cc3a3f271d02a4e7f
:MODIFIED: [2019-10-14 Mon 10:25]
:END:

**** [[https://github.com/yoshiki/yaml-mode][=yaml-mode=]]
:PROPERTIES:
:HASH:     a6c40f83e5c2a924651694c8fd6b4d57
:MODIFIED: [2019-10-14 Mon 10:31]
:END:

#+begin_quote
The emacs major mode for editing files in the YAML data serialization
format.
#+end_quote

#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight
    (:host github :repo "yoshiki/yaml-mode")
    :init
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src

** IDE features
:PROPERTIES:
:HASH:     22cb5246b2bc2a0441c3401579e5eee0
:MODIFIED: [2020-01-08 Wed 10:40]
:END:
:LOGBOOK:
- State "TODO"       from              [2019-03-04 Mon 16:51]
:END:

*** [[https://github.com/company-mode/company-mode][company-mode]]
:PROPERTIES:
:HASH:     831533739a020dac406039eacc05ccfa
:MODIFIED: [2020-01-07 Tue 17:27]
:END:

#+begin_quote
Modular in-buffer completion framework for Emacs
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package company
    :preface
    (setq company-idle-delay 0.02)
    :hook
    (prog-mode . company-mode))
#+END_SRC

*** [[https://github.com/company-mode/company-quickhelp][company-quickhelp]]
:PROPERTIES:
:HASH:     1272680d42973765b5fad584119d58e3
:MODIFIED: [2020-01-08 Wed 10:41]
:END:

#+begin_quote
Documentation popup for Company
#+end_quote

#+begin_src emacs-lisp
  (use-package company-quickhelp
    :after '(pos-tip company)
    :hook
    (prog-mode . company-quickhelp-mode))
#+end_src

*** [[https://emacsredux.com/blog/2013/05/31/highlight-lines-that-exceed-a-certain-length-limit/][Highlight lines that exceed a certain number of characters]]
:PROPERTIES:
:HASH:     e8d8b133ab73764ca68d2a3c2e1d8124
:MODIFIED: [2020-01-02 Thu 13:42]
:END:

#+begin_src emacs-lisp
  (require 'whitespace)
  (setq whitespace-line-column 80) ;; limit line length
  (setq whitespace-style '(face lines-tail))

  (add-hook 'prog-mode-hook 'whitespace-mode)
#+end_src

*** [[https://github.com/tarsius/hl-todo][hl-todo]]
:PROPERTIES:
:HASH:     65e7897d7c9b5364b39d756d8f54c87c
:MODIFIED: [2020-01-02 Thu 13:42]
:END:

#+begin_quote
Highlight TODO keywords
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package hl-todo
    :config
    (global-hl-todo-mode t))
#+END_SRC

*** [[https://github.com/joaotavora/yasnippet][yasnippet]]
:PROPERTIES:
:HASH:     730e1be6a0e600b0ad98c67fd60fb1ba
:MODIFIED: [2020-01-02 Thu 13:44]
:END:

#+begin_quote
A template system for Emacs
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))
#+END_SRC

*** Code folding
:PROPERTIES:
:HASH:     a2c73c4d2db192f738abc62618f7ea1d
:MODIFIED: 2019-06-26 13:54:04
:END:

**** =hs-minor-mode=
:PROPERTIES:
:HASH:     07e03485def2f28bb0693588bf724cad
:MODIFIED: [2020-01-02 Thu 13:46]
:END:

Sources:

[[https://gist.github.com/jgomo3/2046f7f1da8110b163dd7690531d454f][hs-special-modes-alist]]

#+begin_src emacs-lisp
  (use-package hs-minor-mode
    :straight nil
    :general
    (tm/leader-def
      :infix "TAB"
      :prefix-command 'tm/hideshow-prefix-command
      :prefix-map 'tm/hideshow-prefix-map
      "" '(:which-key "hideshow prefix" :ignore t)
      "s" 'hs-show-all
      "h" 'hs-hide-all
      "B" 'hs-show-block
      "b" 'hs-hide-block
      "l" 'hs-hide-level)
    (:keymaps 'prog-mode-map
     :states 'normal
     "TAB" 'hs-toggle-hiding)
    :hook
    (prog-mode . hs-minor-mode))
#+end_src

*** Linting and syntax checking
:PROPERTIES:
:HASH:     b98d307fd581299dca8b25680d98698a
:MODIFIED: [2020-01-02 Thu 13:47]
:END:

**** [[https://github.com/flycheck/flycheck][flycheck]]
:PROPERTIES:
:HASH:     c4962cdcfaba5e6f5fbda7042aeb6221
:MODIFIED: [2020-01-08 Wed 11:46]
:END:

#+begin_quote
On the fly syntax checking for GNU Emacs
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init
    (require 'pos-tip)
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode)
    ;; Config for RuboCop
    (setq flycheck-rubocoprc ".rubocop.yml")
    ;; Config for Puppet lint
    (setq flycheck-puppet-lint-rc "/home/tminor/.puppet-lint.rc")
    ;; Sets path to most recent puppet executable.
    (setq flycheck-puppet-parser-executable "/home/tminor/.gem/ruby/gems/puppet-6.5.0/bin/puppet"))
#+END_SRC

**** [[https://github.com/flycheck/flycheck-pos-tip][flycheck-pos-tip]]
:PROPERTIES:
:HASH:     f969550d34f69e2ee51d0ed5c3bd8db5
:MODIFIED: [2020-01-08 Wed 11:46]
:END:

#+begin_quote
Flycheck errors display in tooltip
#+end_quote

#+begin_src emacs-lisp
  (use-package flycheck-pos-tip
    :after '(flycheck pos-tip)
    :hook
    (prog-mode . flycheck-pos-tip-mode))
#+end_src

*** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]
:PROPERTIES:
:HASH:     09284a22674e8bd0417b3d69cc9a8881
:MODIFIED: [2020-01-02 Thu 13:50]
:END:

#+begin_quote
Emacs rainbow delimiters mode
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** [[https://github.com/Fuco1/smartparens][smartparens]]
:PROPERTIES:
:HASH:     7202eaca2b14387e776edb94cdfff3e7
:MODIFIED: [2020-01-08 Wed 10:53]
:END:

#+begin_quote
Minor mode for Emacs that deals with parens pairs and tries to be
smart about it.
#+end_quote

#+begin_src emacs-lisp
  (use-package smartparens
    :hook
    (eval-expression-minibuffer-setup . smartparens-strict-mode)
    :init
    (smartparens-global-strict-mode 1)
    (show-smartparens-global-mode 1)
    :config
    (require 'smartparens-config)
    (sp-with-modes 'org-mode
      (sp-local-pair "*" "*"
                     :actions '(insert wrap)
                     :unless '(sp-point-after-word-p sp-point-at-bol-p)
                     :wrap "C-*" :skip-match 'sp--org-skip-asterisk)
      (sp-local-pair "_" "_" :unless '(sp-point-after-word-p)
                     :wrap "C-_")
      (sp-local-pair "/" "/" :unless '(sp-point-after-word-p)
                     :post-handlers '(("[d1]" "SPC")))
      (sp-local-pair "~" "~" :unless '(sp-point-after-word-p)
                     :post-handlers '(("[d1]" "SPC")))
      (sp-local-pair "=" "=" :unless '(sp-point-after-word-p)
                     :post-handlers '(("[d1]" "SPC")))))
#+end_src

** Version control
:PROPERTIES:
:HASH:     8d9a5fb1f24539513aa7494f92caaf48
:MODIFIED: 2019-03-08 15:50:43
:END:

*** [[https://github.com/magit/magit][magit]]
:PROPERTIES:
:HASH:     bddac61e8414118dbae74ae61072742a
:MODIFIED: [2020-01-02 Thu 14:04]
:END:

#+begin_quote
It's Magit! A Git porcelain inside Emacs.
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight
    (:host github :repo "magit/magit")
    :general
    (tm/leader-def
      :infix "m"
      :prefix-command 'tm/magit-prefix-command
      :prefix-map 'tm/magit-prefix-map
      "" '(:which-key "magit prefix" :ignore t)
      "B" 'tm/magit-blame-toggle
      "C" 'magit-clone
      "L" 'magit-log-buffer-file
      "a" 'magit-submodule-add
      "b" 'magit-branch
      "c" 'magit-checkout
      "f" 'magit-find-file
      "l" 'magit-log-all
      "s" 'magit-status
      "p" 'magit-file-popup
      "A" 'vc-annotate)
    :config
    (setq magit-diff-refine-hunk t
          auto-revert-check-vc-info t
          git-commit-summary-max-length 50
          git-commit-major-mode 'org-mode))
#+END_SRC

**** [[https://github.com/alphapapa/magit-todos][magit-todos]]
:PROPERTIES:
:HASH:     013d931b77579815d877c65134755a9c
:MODIFIED: [2020-01-03 Fri 08:22]
:END:
:LOGBOOK:
- State "TODO"    from ""        [2019-06-26 Wed 14:25]
:END:

#+begin_quote
This package displays keyword entries from source code comments and
Org files in the Magit status buffer.
#+end_quote

#+begin_src emacs-lisp
  (use-package magit-todos)
#+end_src

**** [[https://github.com/emacs-evil/evil-magit][evil-magit]]
:PROPERTIES:
:HASH:     4bf4320783a5c3fe078e3b8d5b90903a
:MODIFIED: [2020-01-02 Thu 13:51]
:END:

#+begin_quote
This library configures Magit and Evil to play well with each other.
#+end_quote

#+begin_src emacs-lisp
  (use-package evil-magit
    :init
    (setq evil-magit-use-y-for-yank nil))
#+end_src

**** [[https://github.com/magit/forge][forge]]
:PROPERTIES:
:HASH:     543a5d62c0981f72825e836a76f95f83
:MODIFIED: [2020-01-02 Thu 14:04]
:END:

#+begin_quote
Work with Git forges from the comfort of Magit
#+end_quote

#+begin_src emacs-lisp
  (use-package forge
    :straight
    (:host github :repo "magit/forge")
    :after magit)
#+end_src

*** =vc-mode=
:PROPERTIES:
:HASH:     013eebccfe07f0df05c9fccade1e5b39
:MODIFIED: [2020-01-03 Fri 08:27]
:END:

#+begin_src emacs-lisp
  (use-package vc-mode
    :straight nil
    :init
    (setq vc-follow-symlinks t))
#+end_src

*** =smerge-mode=
:PROPERTIES:
:HASH:     2236267f7cab940b7259cf2f1d9b3b28
:MODIFIED: [2020-01-02 Thu 13:51]
:END:

#+begin_src emacs-lisp
  (use-package smerge-mode
    :straight nil
    :general
    (:keymaps 'smerge-mode-map
     :states '(normal)
     "g <up>" 'smerge-keep-upper
     "g <down>" 'smerge-keep-lower
     "]n" 'smerge-next
     "[p" 'smerge-prev
     "gc" 'smerge-keep-current
     "gr" 'smerge-resolve))
#+end_src

** Regex
:PROPERTIES:
:HASH:     87d03ed42a200652252eefc5360433a5
:MODIFIED: [2019-09-04 Wed 16:27]
:END:

*** [[https://github.com/benma/visual-regexp.el][=visual-regexp=]] and [[https://github.com/benma/visual-regexp-steroids.el/][=visual-regexp-steroids=]]
:PROPERTIES:
:HASH:     dea9d1d1a0fc5b524b820aa2ad15f7a2
:MODIFIED: [2019-09-16 Mon 10:24]
:END:

#+begin_quote
visual-regexp for Emacs is like replace-regexp, but with live visual
feedback directly in the buffer.
#+end_quote

#+begin_quote
=visual-regexp-steroids= is an extension to =visual-regexp= which enables
the use of modern regexp engines.
#+end_quote

#+begin_src emacs-lisp
  (use-package visual-regexp
    :demand t
    :straight
    (:host github :repo "benma/visual-regexp.el")
    :general
    (tm/leader-def
      "r" 'vr/isearch-forward
      "R" 'vr/isearch-backward)
    :init
    (use-package visual-regexp-steroids
      :straight
      (:host github :repo "benma/visual-regexp-steroids.el")
      :init
      (setq vr/engine 'pcre2el))
    (require 'visual-regexp-steroids)
    (use-package pcre2el)
    (require 'pcre2el))
#+end_src

* Hydra
:PROPERTIES:
:HASH:     5e6e39921e99257f5dec24edd71c7ccd
:MODIFIED: 2019-03-08 15:48:05
:END:

** Hydra bootstrap
:PROPERTIES:
:HASH:     05cb03ac5afa0a2919e6faba418c1a86
:MODIFIED: 2019-03-11 06:42:11
:END:

Make sure hydra is installed.

#+BEGIN_SRC emacs-lisp
(use-package hydra)
#+END_SRC

** Straight.el
:PROPERTIES:
:HASH:     a729bc93162f640534c88d342f37a8b7
:MODIFIED: 2019-03-11 06:42:11
:END:

Straight [[https://github.com/abo-abo/hydra/wiki/straight.el][hydra helper menu]]:

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-straight-helper (:hint nil)
    "
  _c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
  _C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
  ----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
  _r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
  _R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
    ("c" straight-check-all)
    ("C" straight-check-package)
    ("r" straight-rebuild-all)
    ("R" straight-rebuild-package)
    ("f" straight-fetch-all)
    ("F" straight-fetch-package)
    ("p" straight-pull-all)
    ("P" straight-pull-package)
    ("m" straight-merge-all)
    ("M" straight-merge-package)
    ("n" straight-normalize-all)
    ("N" straight-normalize-package)
    ("u" straight-push-all)
    ("U" straight-push-package)
    ("v" straight-freeze-versions)
    ("V" straight-thaw-versions)
    ("w" straight-watcher-start)
    ("W" straight-watcher-quit)
    ("g" straight-get-recipe)
    ("e" straight-prune-build)
    ("q" nil))
#+END_SRC

* Other
:PROPERTIES:
:HASH:     4bad01946f576f1858db6dc458a7ff7a
:MODIFIED: 2019-03-08 15:48:05
:END:

** Kill whitespace when saving
:PROPERTIES:
:HASH:     631782a0d5b9beb39260ddc329b3188f
:MODIFIED: 2019-06-27 21:52:53
:END:

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Rainbow Mode
:PROPERTIES:
:HASH:     cc38369f16226c187e8b23e7ddd6c76f
:MODIFIED: 2019-06-27 21:52:53
:END:

Rainbow mode changes the background of any color name. This includes
hexidecimal representation of colors.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode)
#+END_SRC

** TODO Spell check                                                  :easy:
:PROPERTIES:
:HASH:     60797ef1b8dc4f07509f8356fe0a627c
:MODIFIED: 2019-06-28 16:58:34
:END:
:LOGBOOK:
- State "TODO"       from              [2019-06-27 Thu 21:52]
:END:

Move this section and update =hook= section.

Spell checking with flyspell:

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :config
    (add-hook 'text-mode-hook 'flyspell-mode))
#+END_SRC

** File type modes (not =prog-mode= files)
:PROPERTIES:
:HASH:     0da15673b84dbf69ae2cf8d8caf3d66f
:MODIFIED: 2019-06-27 21:52:53
:END:

File types like csv, yaml, etc.

#+BEGIN_SRC emacs-lisp
  (use-package csv-mode)
#+END_SRC
